{"paragraphs":[{"text":"/*\r\n\tThis code is intended to be run in the Scala shell. \r\n\tLaunch the Scala Spark shell by running ./bin/spark-shell from the Spark directory.\r\n\tYou can enter each line in the shell and see the result immediately.\r\n\tThe expected output in the Spark console is presented as commented lines following the\r\n\trelevant code\r\n\r\n\tThe Scala shell creates a SparkContex variable available to us as 'sc'\r\n\r\n  Ensure you start the shell with sufficient memory: ./bin/spark-shell --driver-memory 4g\r\n*/\r\n\r\n/* Load the raw ratings data from a file. Replace 'PATH' with the path to the MovieLens data */\r\nval path = \"D:\\\\Project\\\\Spark\\\\Machine-Learning-with-Spark\\\\Data\"\r\nval rawData = sc.textFile(path + \"\\\\ml-100k\\\\u.data\")\r\n","dateUpdated":"2016-11-29T16:38:11+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084554_185224509","id":"20161121-104829_919099671","result":{"code":"SUCCESS","type":"TEXT","msg":"\r\n\npath: String = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\r\nrawData: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.data MapPartitionsRDD[1921] at textFile at <console>:63\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:206","dateFinished":"2016-11-29T16:38:12+0900","dateStarted":"2016-11-29T16:38:11+0900"},{"text":"rawData.first()","dateUpdated":"2016-11-29T16:38:11+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105716_1463941806","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres74: String = 196\t242\t3\t881250949\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:207","dateFinished":"2016-11-29T16:38:13+0900","dateStarted":"2016-11-29T16:38:12+0900"},{"text":"/* Extract the user id, movie id and rating only from the dataset */\r\nval rawRatings = rawData.map(_.split(\"\\t\").take(3))\r\nrawRatings.first()","dateUpdated":"2016-11-29T16:38:11+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-104844_323629137","result":{"code":"SUCCESS","type":"TEXT","msg":"\nrawRatings: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[1922] at map at <console>:51\n\nres77: Array[String] = Array(196, 242, 3)\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:208","dateFinished":"2016-11-29T16:38:15+0900","dateStarted":"2016-11-29T16:38:12+0900"},{"text":"/* Import Spark's ALS recommendation model and inspect the train method */\r\nimport org.apache.spark.mllib.recommendation.ALS\r\n//ALS.train","dateUpdated":"2016-11-29T16:38:12+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105021_745191795","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.recommendation.ALS\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:209","dateFinished":"2016-11-29T16:38:17+0900","dateStarted":"2016-11-29T16:38:14+0900"},{"text":"/* Import the Rating class and inspect it */\r\nimport org.apache.spark.mllib.recommendation.Rating\r\n//Rating()","dateUpdated":"2016-11-29T16:38:12+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105029_894548082","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.recommendation.Rating\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:210","dateFinished":"2016-11-29T16:38:17+0900","dateStarted":"2016-11-29T16:38:16+0900"},{"text":"/* Construct the RDD of Rating objects */\r\nval ratings = rawRatings.map { case Array(user, movie, rating) => Rating(user.toInt, movie.toInt, rating.toDouble) }\r\n","dateUpdated":"2016-11-29T16:38:12+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105036_1901053080","result":{"code":"SUCCESS","type":"TEXT","msg":"\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[1923] at map at <console>:55\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:211","dateFinished":"2016-11-29T16:38:19+0900","dateStarted":"2016-11-29T16:38:17+0900"},{"text":"ratings.first()","dateUpdated":"2016-11-29T16:38:12+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-110012_1485395541","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres85: org.apache.spark.mllib.recommendation.Rating = Rating(196,242,3.0)\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:212","dateFinished":"2016-11-29T16:38:19+0900","dateStarted":"2016-11-29T16:38:18+0900"},{"text":"/* Train the ALS model with rank=50, iterations=10, lambda=0.01 */\r\nval model = ALS.train(ratings, 50, 10, 0.01)","dateUpdated":"2016-11-29T16:38:13+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105053_667213749","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@4a7f17b2\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:213","dateFinished":"2016-11-29T16:38:28+0900","dateStarted":"2016-11-29T16:38:19+0900"},{"text":"/* Inspect the user factors */\r\nmodel.userFeatures","dateUpdated":"2016-11-29T16:38:13+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-113124_375266397","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres90: org.apache.spark.rdd.RDD[(Int, Array[Double])] = users MapPartitionsRDD[2129] at mapValues at ALS.scala:268\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:214","dateFinished":"2016-11-29T16:38:29+0900","dateStarted":"2016-11-29T16:38:20+0900"},{"text":"/* Count user factors and force computation */\r\nmodel.userFeatures.count","dateUpdated":"2016-11-29T16:38:13+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105056_447237152","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres93: Long = 943\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:215","dateFinished":"2016-11-29T16:38:30+0900","dateStarted":"2016-11-29T16:38:29+0900"},{"text":"model.productFeatures.count","dateUpdated":"2016-11-29T16:38:14+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105121_1777043564","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres95: Long = 1682\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:216","dateFinished":"2016-11-29T16:38:30+0900","dateStarted":"2016-11-29T16:38:29+0900"},{"text":"model.productFeatures.take(5)","dateUpdated":"2016-11-29T16:38:14+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-113326_634331923","result":{"code":"SUCCESS","type":"TEXT","msg":"res97: Array[(Int, Array[Double])] = Array((4,Array(-0.4609338045120239, -0.45417630672454834, 0.22948388755321503, 0.4722287952899933, -0.4692433178424835, 0.22632522881031036, 0.03869028389453888, -0.2361871302127838, -0.6837258338928223, 1.271166205406189, -0.363750159740448, 0.1565426141023636, 0.10788358002901077, -0.43443432450294495, 0.9679455161094666, 1.149117112159729, 1.0508755445480347, 0.1175423339009285, 1.5617402791976929, 0.8534431457519531, -0.08329224586486816, -0.44641411304473877, -1.2740548849105835, 0.537248432636261, -0.5090498924255371, 0.6612221598625183, 1.369870901107788, 0.7832614779472351, 0.1152002215385437, -0.8449671268463135, -0.5705891847610474, 0.05516856908798218, -0.35816121101379395, 1.0604774951934814, -0.5138088464736938, -0.5951982736587524, -0.6..."},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:217","dateFinished":"2016-11-29T16:38:31+0900","dateStarted":"2016-11-29T16:38:30+0900"},{"text":"/* Make a prediction for a single user and movie pair */ \r\nval predictedRating = model.predict(789, 123)","dateUpdated":"2016-11-29T16:38:14+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105138_1115583255","result":{"code":"SUCCESS","type":"TEXT","msg":"\npredictedRating: Double = 3.9707716047498933\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:218","dateFinished":"2016-11-29T16:38:32+0900","dateStarted":"2016-11-29T16:38:31+0900"},{"text":"/* Make predictions for a single user across all movies */\r\nval userId = 789\r\nval K = 10\r\nval topKRecs = model.recommendProducts(userId, K)\r\nprintln(topKRecs.mkString(\"\\n\"))","dateUpdated":"2016-11-29T16:38:14+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105148_732966494","result":{"code":"SUCCESS","type":"TEXT","msg":"\nuserId: Int = 789\n\nK: Int = 10\n\ntopKRecs: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(789,573,6.041601557662383), Rating(789,185,5.953593873486393), Rating(789,56,5.845405034266487), Rating(789,1098,5.80592068156125), Rating(789,484,5.783890207392687), Rating(789,1011,5.700664472704711), Rating(789,23,5.677605691179347), Rating(789,663,5.599438493682245), Rating(789,357,5.544540293978311), Rating(789,427,5.519910139086396))\nRating(789,573,6.041601557662383)\nRating(789,185,5.953593873486393)\nRating(789,56,5.845405034266487)\nRating(789,1098,5.80592068156125)\nRating(789,484,5.783890207392687)\nRating(789,1011,5.700664472704711)\nRating(789,23,5.677605691179347)\nRating(789,663,5.599438493682245)\nRating(789,357,5.544540293978311)\nRating(789,427,5.519910139086396)\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:219","dateFinished":"2016-11-29T16:38:34+0900","dateStarted":"2016-11-29T16:38:31+0900"},{"text":"/* Load movie titles to inspect the recommendations */\r\nval movies = sc.textFile(path + \"\\\\ml-100k\\\\u.item\")\r\nval titles = movies.map(line => line.split(\"\\\\|\").take(2)).map(array => (array(0).toInt, array(1))).collectAsMap()\r\ntitles(123)","dateUpdated":"2016-11-29T16:38:14+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105153_1230629238","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmovies: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.item MapPartitionsRDD[2134] at textFile at <console>:52\ntitles: scala.collection.Map[Int,String] = Map(137 -> Big Night (1996), 891 -> Bent (1997), 550 -> Die Hard: With a Vengeance (1995), 1205 -> Secret Agent, The (1996), 146 -> Unhook the Stars (1996), 864 -> My Fellow Americans (1996), 559 -> Interview with the Vampire (1994), 218 -> Cape Fear (1991), 568 -> Speed (1994), 227 -> Star Trek VI: The Undiscovered Country (1991), 765 -> Boomerang (1992), 1115 -> Twelfth Night (1996), 774 -> Prophecy, The (1995), 433 -> Heathers (1989), 92 -> True Romance (1993), 1528 -> Nowhere (1997), 846 -> To Gillian on Her 37th Birthday (1996), 1187 -> Switchblade Sisters (1975), 1501 -> Prisoner of the Mountains (Kavkazsky Plennik) (1996), 442 -> Amityville Curse, The (1990), 1160 -> Love! Valour! Compassion! (1997), 101 -> Heavy Metal (1981), 1196 -> Sa...\nres105: String = Frighteners, The (1996)\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:220","dateFinished":"2016-11-29T16:38:36+0900","dateStarted":"2016-11-29T16:38:32+0900"},{"text":"val moviesForUser = ratings.keyBy(_.user).lookup(789)\nprintln(moviesForUser.size)","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105204_1207564081","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmoviesForUser: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(789,1012,4.0), Rating(789,127,5.0), Rating(789,475,5.0), Rating(789,93,4.0), Rating(789,1161,3.0), Rating(789,286,1.0), Rating(789,293,4.0), Rating(789,9,5.0), Rating(789,50,5.0), Rating(789,294,3.0), Rating(789,181,4.0), Rating(789,1,3.0), Rating(789,1008,4.0), Rating(789,508,4.0), Rating(789,284,3.0), Rating(789,1017,3.0), Rating(789,137,2.0), Rating(789,111,3.0), Rating(789,742,3.0), Rating(789,248,3.0), Rating(789,249,3.0), Rating(789,1007,4.0), Rating(789,591,3.0), Rating(789,150,5.0), Rating(789,276,5.0), Rating(789,151,2.0), Rating(789,129,5.0), Rating(789,100,5.0), Rating(789,741,5.0), Rating(789,288,3.0), Rating(789,762,3.0), Rating(789,628,3.0), Rating(789,124,4.0))\n33\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:221","dateFinished":"2016-11-29T16:38:37+0900","dateStarted":"2016-11-29T16:38:34+0900"},{"text":"\nmoviesForUser.sortBy(-_.rating).take(10).map(rating => (titles(rating.product), rating.rating)).foreach(println)","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":11,"graph":{"mode":"table","height":86.53408813476562,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105218_1207749469","result":{"code":"SUCCESS","type":"TEXT","msg":"(Godfather, The (1972),5.0)\r\n(Trainspotting (1996),5.0)\r\n(Dead Man Walking (1995),5.0)\r\n(Star Wars (1977),5.0)\r\n(Swingers (1996),5.0)\r\n(Leaving Las Vegas (1995),5.0)\r\n(Bound (1996),5.0)\r\n(Fargo (1996),5.0)\r\n(Last Supper, The (1995),5.0)\r\n(Private Parts (1997),4.0)\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:222","dateFinished":"2016-11-29T16:38:38+0900","dateStarted":"2016-11-29T16:38:36+0900"},{"text":"topKRecs.map(rating => (titles(rating.product), rating.rating)).foreach(println)","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105234_1124696383","result":{"code":"SUCCESS","type":"TEXT","msg":"(Body Snatchers (1993),6.041601557662383)\r\n(Psycho (1960),5.953593873486393)\r\n(Pulp Fiction (1994),5.845405034266487)\r\n(Flirting With Disaster (1996),5.80592068156125)\r\n(Maltese Falcon, The (1941),5.783890207392687)\r\n(2 Days in the Valley (1996),5.700664472704711)\r\n(Taxi Driver (1976),5.677605691179347)\r\n(Being There (1979),5.599438493682245)\r\n(One Flew Over the Cuckoo's Nest (1975),5.544540293978311)\r\n(To Kill a Mockingbird (1962),5.519910139086396)\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:223","dateFinished":"2016-11-29T16:38:39+0900","dateStarted":"2016-11-29T16:38:37+0900"},{"text":"/* Compute item-to-item similarities between an item and the other items */\r\nimport org.jblas.DoubleMatrix\r\nval aMatrix = new DoubleMatrix(Array(1.0, 2.0, 3.0))","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105241_798051349","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.jblas.DoubleMatrix\n\naMatrix: org.jblas.DoubleMatrix = [1.000000; 2.000000; 3.000000]\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:224","dateFinished":"2016-11-29T16:38:40+0900","dateStarted":"2016-11-29T16:38:39+0900"},{"text":"/* Compute the cosine similarity between two vectors */\r\ndef cosineSimilarity(vec1: DoubleMatrix, vec2: DoubleMatrix): Double = {\r\n\tvec1.dot(vec2) / (vec1.norm2() * vec2.norm2())\r\n}","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105251_893602738","result":{"code":"SUCCESS","type":"TEXT","msg":"\ncosineSimilarity: (vec1: org.jblas.DoubleMatrix, vec2: org.jblas.DoubleMatrix)Double\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:225","dateFinished":"2016-11-29T16:38:42+0900","dateStarted":"2016-11-29T16:38:40+0900"},{"text":"val itemId = 567\r\nval itemFactor = model.productFeatures.lookup(itemId).head","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105301_304885976","result":{"code":"SUCCESS","type":"TEXT","msg":"\nitemId: Int = 567\nitemFactor: Array[Double] = Array(-0.042537569999694824, -0.14196649193763733, 0.5754452347755432, 0.3262605369091034, -0.5202929377555847, 0.1463511884212494, 0.5696526765823364, 0.16371676325798035, -0.3172606825828552, 0.13666731119155884, -0.17049115896224976, -0.08583899587392807, 0.4993588924407959, 0.1536799967288971, 1.1488317251205444, 0.49635711312294006, 0.4952479898929596, 0.846075713634491, 0.06295596808195114, 0.20204401016235352, -0.25696417689323425, -0.9133576154708862, -0.5936509370803833, 0.35747212171554565, -0.5741629600524902, 0.6981180906295776, 0.31623971462249756, 0.22771066427230835, 0.8737037777900696, 0.3285827040672302, 0.39876556396484375, -0.7059275507926941, 0.30910226702690125, -0.2960008978843689, -0.3760976791381836, -1.6939946413040161, 0.878761827945..."},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:226","dateFinished":"2016-11-29T16:38:43+0900","dateStarted":"2016-11-29T16:38:41+0900"},{"text":"val itemVector = new DoubleMatrix(itemFactor)\ncosineSimilarity(itemVector, itemVector)","dateUpdated":"2016-11-29T16:38:15+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105318_1117719024","result":{"code":"SUCCESS","type":"TEXT","msg":"\nitemVector: org.jblas.DoubleMatrix = [-0.042538; -0.141966; 0.575445; 0.326261; -0.520293; 0.146351; 0.569653; 0.163717; -0.317261; 0.136667; -0.170491; -0.085839; 0.499359; 0.153680; 1.148832; 0.496357; 0.495248; 0.846076; 0.062956; 0.202044; -0.256964; -0.913358; -0.593651; 0.357472; -0.574163; 0.698118; 0.316240; 0.227711; 0.873704; 0.328583; 0.398766; -0.705928; 0.309102; -0.296001; -0.376098; -1.693995; 0.878762; 0.015805; -0.197971; -0.016210; 1.077640; -0.216084; 0.080537; -0.625458; -0.403446; -0.727672; 0.007927; 0.706861; -0.427103; -0.660072]\n\nres119: Double = 1.0\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:227","dateFinished":"2016-11-29T16:38:44+0900","dateStarted":"2016-11-29T16:38:42+0900"},{"text":"val sims = model.productFeatures.map{ case (id, factor) => \r\n\tval factorVector = new DoubleMatrix(factor)\r\n\tval sim = cosineSimilarity(factorVector, itemVector)\r\n\t(id, sim)\r\n}\r\nval sortedSims = sims.top(K)(Ordering.by[(Int, Double), Double] { case (id, similarity) => similarity })\r\nprintln(sortedSims.mkString(\"\\n\"))","dateUpdated":"2016-11-29T16:38:16+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105339_1797029781","result":{"code":"SUCCESS","type":"TEXT","msg":"\nsims: org.apache.spark.rdd.RDD[(Int, Double)] = MapPartitionsRDD[2140] at map at <console>:67\n\nsortedSims: Array[(Int, Double)] = Array((567,1.0), (413,0.6628266910957837), (940,0.6487545500857325), (1376,0.6330066306953446), (670,0.6234315549353927), (288,0.6134899782811049), (685,0.6045692939449674), (563,0.5998655169800092), (1489,0.5960793884302821), (436,0.595002267208793))\n(567,1.0)\n(413,0.6628266910957837)\n(940,0.6487545500857325)\n(1376,0.6330066306953446)\n(670,0.6234315549353927)\n(288,0.6134899782811049)\n(685,0.6045692939449674)\n(563,0.5998655169800092)\n(1489,0.5960793884302821)\n(436,0.595002267208793)\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:228","dateFinished":"2016-11-29T16:38:46+0900","dateStarted":"2016-11-29T16:38:43+0900"},{"text":"/* We can check the movie title of our chosen movie and the most similar movies to it */\r\nprintln(titles(itemId))\r\n// Wes Craven's New Nightmare (1994)\r\nval sortedSims2 = sims.top(K + 1)(Ordering.by[(Int, Double), Double] { case (id, similarity) => similarity })\r\nsortedSims2.slice(1, 11).map{ case (id, sim) => (titles(id), sim) }.mkString(\"\\n\")","dateUpdated":"2016-11-29T16:38:16+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105349_1354684984","result":{"code":"SUCCESS","type":"TEXT","msg":"Wes Craven's New Nightmare (1994)\r\n\nsortedSims2: Array[(Int, Double)] = Array((567,1.0), (413,0.6628266910957837), (940,0.6487545500857325), (1376,0.6330066306953446), (670,0.6234315549353927), (288,0.6134899782811049), (685,0.6045692939449674), (563,0.5998655169800092), (1489,0.5960793884302821), (436,0.595002267208793), (7,0.5891772588697846))\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\nres125: String =\r\n(Tales from the Crypt Presents: Bordello of Blood (1996),0.6628266910957837)\r\n(Airheads (1994),0.6487545500857325)\r\n(Meet Wally Sparks (1997),0.6330066306953446)\r\n(Body Snatchers (1993),0.6234315549353927)\r\n(Scream (1996),0.6134899782811049)\r\n(Executive Decision (1996),0.6045692939449674)\r\n(Stephen King's The Langoliers (1995),0.5998655169800092)\r\n(Chasers (1994),0.5960793884302821)\r\n(American Werewolf in London, An (1981),0.595002267208793)\r\n(Twelve Monkeys (1995),0.5891772588697846)\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:229","dateFinished":"2016-11-29T16:38:48+0900","dateStarted":"2016-11-29T16:38:45+0900"},{"text":"// We'll take the first rating for our example user 789\r\nval actualRating = moviesForUser.take(1)(0)\r\n// actualRating: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(789,1012,4.0))\r\nval predictedRating = model.predict(789, actualRating.product)\r\n// ...\r\n// 14/04/13 13:01:15 INFO SparkContext: Job finished: lookup at MatrixFactorizationModel.scala:46, took 0.025404 s\r\n// predictedRating: Double = 4.001005374200248\r\nval squaredError = math.pow(predictedRating - actualRating.rating, 2.0)\r\n// squaredError: Double = 1.010777282523947E-6\r\n\r\n/* Compute Mean Squared Error across the dataset */\r\n// Below code is taken from the Apache Spark MLlib guide at: http://spark.apache.org/docs/latest/mllib-guide.html#collaborative-filtering-1\r\nval usersProducts = ratings.map{ case Rating(user, product, rating)  => (user, product)}\r\nval predictions = model.predict(usersProducts).map{\r\n    case Rating(user, product, rating) => ((user, product), rating)\r\n}\r\nval ratingsAndPredictions = ratings.map{\r\n    case Rating(user, product, rating) => ((user, product), rating)\r\n}.join(predictions)\r\nval MSE = ratingsAndPredictions.map{\r\n    case ((user, product), (actual, predicted)) =>  math.pow((actual - predicted), 2)\r\n}.reduce(_ + _) / ratingsAndPredictions.count\r\nprintln(\"Mean Squared Error = \" + MSE)","dateUpdated":"2016-11-29T16:38:16+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105416_392183887","result":{"code":"SUCCESS","type":"TEXT","msg":"\nactualRating: org.apache.spark.mllib.recommendation.Rating = Rating(789,1012,4.0)\n\npredictedRating: Double = 3.958853657884931\nMean Squared Error = 0.0843608531527226\r\n\r\n\r\n\r\n\r\n\nsquaredError: Double = 0.0016930214694503064\r\nusersProducts: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[2143] at map at <console>:81\r\npredictions: org.apache.spark.rdd.RDD[((Int, Int), Double)] = MapPartitionsRDD[2152] at map at <console>:82\r\nratingsAndPredictions: org.apache.spark.rdd.RDD[((Int, Int), (Double, Double))] = MapPartitionsRDD[2156] at join at <console>:87\r\nMSE: Double = 0.0843608531527226\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:230","dateFinished":"2016-11-29T16:38:53+0900","dateStarted":"2016-11-29T16:38:47+0900"},{"text":"// Mean Squared Error = 0.08231947642632856\r\nval RMSE = math.sqrt(MSE)\r\nprintln(\"Root Mean Squared Error = \" + RMSE)","dateUpdated":"2016-11-29T16:38:16+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105421_1735502434","result":{"code":"SUCCESS","type":"TEXT","msg":"\nRMSE: Double = 0.2904493986096762\nRoot Mean Squared Error = 0.2904493986096762\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:231","dateFinished":"2016-11-29T16:38:54+0900","dateStarted":"2016-11-29T16:38:48+0900"},{"text":"/* Compute Mean Average Precision at K */\r\n\r\n/* Function to compute average precision given a set of actual and predicted ratings */\r\n// Code for this function is based on: https://github.com/benhamner/Metrics\r\ndef avgPrecisionK(actual: Seq[Int], predicted: Seq[Int], k: Int): Double = {\r\n  val predK = predicted.take(k)\r\n  var score = 0.0\r\n  var numHits = 0.0\r\n  for ((p, i) <- predK.zipWithIndex) {\r\n    if (actual.contains(p)) {\r\n      numHits += 1.0\r\n      score += numHits / (i.toDouble + 1.0)\r\n    }\r\n  }\r\n  if (actual.isEmpty) {\r\n    1.0\r\n  } else {\r\n    score / scala.math.min(actual.size, k).toDouble\r\n  }\r\n}\r\nval actualMovies = moviesForUser.map(_.product)\r\n// actualMovies: Seq[Int] = ArrayBuffer(1012, 127, 475, 93, 1161, 286, 293, 9, 50, 294, 181, 1, 1008, 508, 284, 1017, 137, 111, 742, 248, 249, 1007, 591, 150, 276, 151, 129, 100, 741, 288, 762, 628, 124)\r\nval predictedMovies = topKRecs.map(_.product)\r\n// predictedMovies: Array[Int] = Array(27, 497, 633, 827, 602, 849, 401, 584, 1035, 1014)\r\nval apk10 = avgPrecisionK(actualMovies, predictedMovies, 10)\r\n// apk10: Double = 0.0","dateUpdated":"2016-11-29T16:38:16+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105434_882292968","result":{"code":"SUCCESS","type":"TEXT","msg":"\r\n\r\n\r\n\navgPrecisionK: (actual: Seq[Int], predicted: Seq[Int], k: Int)Double\r\nactualMovies: Seq[Int] = ArrayBuffer(1012, 127, 475, 93, 1161, 286, 293, 9, 50, 294, 181, 1, 1008, 508, 284, 1017, 137, 111, 742, 248, 249, 1007, 591, 150, 276, 151, 129, 100, 741, 288, 762, 628, 124)\r\npredictedMovies: Array[Int] = Array(573, 185, 56, 1098, 484, 1011, 23, 663, 357, 427)\r\napk10: Double = 0.0\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:232","dateFinished":"2016-11-29T16:38:55+0900","dateStarted":"2016-11-29T16:38:53+0900"},{"text":"/* Compute recommendations for all users */\r\nval itemFactors = model.productFeatures.map { case (id, factor) => factor }.collect()\r\nval itemMatrix = new DoubleMatrix(itemFactors)\r\nprintln(itemMatrix.rows, itemMatrix.columns)","dateUpdated":"2016-11-29T16:38:17+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105455_1834849941","result":{"code":"SUCCESS","type":"TEXT","msg":"itemFactors: Array[Array[Double]] = Array(Array(-0.4609338045120239, -0.45417630672454834, 0.22948388755321503, 0.4722287952899933, -0.4692433178424835, 0.22632522881031036, 0.03869028389453888, -0.2361871302127838, -0.6837258338928223, 1.271166205406189, -0.363750159740448, 0.1565426141023636, 0.10788358002901077, -0.43443432450294495, 0.9679455161094666, 1.149117112159729, 1.0508755445480347, 0.1175423339009285, 1.5617402791976929, 0.8534431457519531, -0.08329224586486816, -0.44641411304473877, -1.2740548849105835, 0.537248432636261, -0.5090498924255371, 0.6612221598625183, 1.369870901107788, 0.7832614779472351, 0.1152002215385437, -0.8449671268463135, -0.5705891847610474, 0.05516856908798218, -0.35816121101379395, 1.0604774951934814, -0.5138088464736938, -0.5951982736587524, -0.65491...itemMatrix: org.jblas.DoubleMatrix = [-0.460934, -0.454176, 0.229484, 0.472229, -0.469243, 0.226325, 0.038690, -0.236187, -0.683726, 1.271166, -0.363750, 0.156543, 0.107884, -0.434434, 0.967946, 1.149117, 1.050876, 0.117542, 1.561740, 0.853443, -0.083292, -0.446414, -1.274055, 0.537248, -0.509050, 0.661222, 1.369871, 0.783261, 0.115200, -0.844967, -0.570589, 0.055169, -0.358161, 1.060477, -0.513809, -0.595198, -0.654911, -0.302620, 0.181089, -0.084305, 0.850571, -0.627834, 0.528558, -0.665128, -0.533802, -0.285663, 0.120949, -0.027096, 0.025770, -0.895259; 0.295131, -0.448235, 0.104732, 0.355806, 0.348712, 0.713816, 0.515730, -0.470248, -0.349811, 1.386123, -0.040346, 0.299618, 0.053722, -0.787524, 1.804844, 1.401683, -0.020579, -0.624748, 1.414513, 0.892481, -0.537428, -0.342680, -0.09...(1682,50)\r\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:233","dateFinished":"2016-11-29T16:38:57+0900","dateStarted":"2016-11-29T16:38:54+0900"},{"text":"// broadcast the item factor matrix\r\nval imBroadcast = sc.broadcast(itemMatrix)\r\n\r\n// compute recommendations for each user, and sort them in order of score so that the actual input \r\n// for the APK computation will be correct\r\nval allRecs = model.userFeatures.map{ case (userId, array) => \r\n  val userVector = new DoubleMatrix(array)\r\n  val scores = imBroadcast.value.mmul(userVector)\r\n  val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\r\n  val recommendedIds = sortedWithId.map(_._2 + 1).toSeq\r\n  (userId, recommendedIds)\r\n}","dateUpdated":"2016-11-29T16:38:17+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105458_1857560573","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimBroadcast: org.apache.spark.broadcast.Broadcast[org.jblas.DoubleMatrix] = Broadcast(1416)\n\nallRecs: org.apache.spark.rdd.RDD[(Int, Seq[Int])] = MapPartitionsRDD[2159] at map at <console>:67\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:234","dateFinished":"2016-11-29T16:38:59+0900","dateStarted":"2016-11-29T16:38:55+0900"},{"text":"// next get all the movie ids per user, grouped by user id\r\nval userMovies = ratings.map{ case Rating(user, product, rating) => (user, product) }.groupBy(_._1)\r\n// userMovies: org.apache.spark.rdd.RDD[(Int, Seq[(Int, Int)])] = MapPartitionsRDD[277] at groupBy at <console>:21\r\n\r\n// finally, compute the APK for each user, and average them to find MAPK\r\nval K = 10\r\nval MAPK = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) => \r\n  val actual = actualWithIds.map(_._2).toSeq\r\n  avgPrecisionK(actual, predicted, K)\r\n}.reduce(_ + _) / allRecs.count\r\nprintln(\"Mean Average Precision at K = \" + MAPK)\r\n// Mean Average Precision at K = 0.030486963254725705\r\n\r\n/* Using MLlib built-in metrics */\r\n\r\n// MSE, RMSE and MAE\r\nimport org.apache.spark.mllib.evaluation.RegressionMetrics\r\nval predictedAndTrue = ratingsAndPredictions.map { case ((user, product), (actual, predicted)) => (actual, predicted) }\r\nval regressionMetrics = new RegressionMetrics(predictedAndTrue)\r\nprintln(\"Mean Squared Error = \" + regressionMetrics.meanSquaredError)\r\nprintln(\"Root Mean Squared Error = \" + regressionMetrics.rootMeanSquaredError)\r\n// Mean Squared Error = 0.08231947642632852\r\n// Root Mean Squared Error = 0.2869137090247319\r\n\r\n// MAPK\r\nimport org.apache.spark.mllib.evaluation.RankingMetrics\r\nval predictedAndTrueForRanking = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) => \r\n  val actual = actualWithIds.map(_._2)\r\n  (predicted.toArray, actual.toArray)\r\n}\r\nval rankingMetrics = new RankingMetrics(predictedAndTrueForRanking)\r\nprintln(\"Mean Average Precision = \" + rankingMetrics.meanAveragePrecision)\r\n// Mean Average Precision = 0.07171412913757183\r\n\r\n// Compare to our implementation, using K = 2000 to approximate the overall MAP\r\nval MAPK2000 = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) => \r\n  val actual = actualWithIds.map(_._2).toSeq\r\n  avgPrecisionK(actual, predicted, 2000)\r\n}.reduce(_ + _) / allRecs.count\r\nprintln(\"Mean Average Precision = \" + MAPK2000)\r\n// Mean Average Precision = 0.07171412913757186","dateUpdated":"2016-11-29T16:38:17+0900","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084570_191380492","id":"20161121-105512_1080491195","result":{"code":"SUCCESS","type":"TEXT","msg":"\nuserMovies: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[2162] at groupBy at <console>:58\n\nK: Int = 10\n\nMAPK: Double = 0.03010806443468159\nMean Average Precision at K = 0.03010806443468159\r\nMean Squared Error = 0.0843608531527226\r\nRoot Mean Squared Error = 0.2904493986096762\r\nMean Average Precision = 0.07309718543624548\r\nMean Average Precision = 0.07309718543624541\r\n\r\n\r\n\r\n\r\n\r\n\r\n\nimport org.apache.spark.mllib.evaluation.RegressionMetrics\r\npredictedAndTrue: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[2167] at map at <console>:88\r\nregressionMetrics: org.apache.spark.mllib.evaluation.RegressionMetrics = org.apache.spark.mllib.evaluation.RegressionMetrics@7e1910ab\r\nimport org.apache.spark.mllib.evaluation.RankingMetrics\r\npredictedAndTrueForRanking: org.apache.spark.rdd.RDD[(Array[Int], Array[Int])] = MapPartitionsRDD[2172] at map at <console>:97\r\nrankingMetrics: org.apache.spark.mllib.evaluation.RankingMetrics[Int] = org.apache.spark.mllib.evaluation.RankingMetrics@609aff4b\r\nMAPK2000: Double = 0.07309718543624541\n"},"dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:235","dateFinished":"2016-11-29T16:39:09+0900","dateStarted":"2016-11-29T16:38:58+0900"},{"text":"","dateUpdated":"2016-11-29T16:38:17+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480404084586_172912544","id":"20161122-072527_965619487","dateCreated":"2016-11-29T16:21:24+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:236","dateFinished":"2016-11-29T16:39:10+0900","dateStarted":"2016-11-29T16:38:59+0900","result":{"code":"SUCCESS","type":"TEXT","msg":""}}],"name":"Chapter 04","id":"2C5QNTVQD","angularObjects":{"2C47MGX9B:shared_process":[],"2C22X7YME:shared_process":[],"2C3K6RKJN:shared_process":[],"2C2EWZ9TA:shared_process":[],"2C2JMDYZ3:shared_process":[],"2C1S848VZ:shared_process":[],"2C2QVVB9Q:shared_process":[],"2C43GNJ9W:shared_process":[],"2C12D5W9R:shared_process":[],"2C1T2UZ3P:shared_process":[],"2C3G51W1E:shared_process":[],"2C36955YP:shared_process":[],"2BZTACRZS:shared_process":[],"2C4AVWZ7X:shared_process":[],"2C3MT2CTG:shared_process":[],"2C1T89CKC:shared_process":[],"2C33Z58NN:shared_process":[],"2C29H1CDW:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}