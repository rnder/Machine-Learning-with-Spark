{"paragraphs":[{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480986915573_1476189615","id":"20161206-101515_1414301312","dateCreated":"2016-12-06T10:15:15+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:138","text":"/*\r\n\tThis code is intended to be run in the Scala shell. \r\n\tLaunch the Scala Spark shell by running ./bin/spark-shell from the Spark directory.\r\n\tYou can enter each line in the shell and see the result immediately.\r\n\tThe expected output in the Spark console is presented as commented lines following the\r\n\trelevant code\r\n\r\n\tThe Scala shell creates a SparkContex variable available to us as 'sc'\r\n*/\r\n\r\n/* Replace 'PATH' with the path to the MovieLens data */\r\n\r\n// load movie data\r\nval path = \"D:\\\\Project\\\\Spark\\\\Machine-Learning-with-Spark\\\\Data\\\\ml-100k\"\r\nval movies = sc.textFile(path + \"\\\\u.item\")\r\nprintln(movies.first)\r\n// 1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0\r\n\r\nval genres = sc.textFile(path + \"\\\\u.genre\")\r\ngenres.take(5).foreach(println)\r\n/*\r\nunknown|0\r\nAction|1\r\nAdventure|2\r\nAnimation|3\r\nChildren's|4\r\n*/","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:05+0900","dateStarted":"2016-12-06T11:30:04+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0\r\nunknown|0\r\nAction|1\r\nAdventure|2\r\nAnimation|3\r\nChildren's|4\r\n\r\n\r\n\npath: String = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\r\nmovies: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.item MapPartitionsRDD[240] at textFile at <console>:48\r\ngenres: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.genre MapPartitionsRDD[242] at textFile at <console>:52\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480987997228_1278764691","id":"20161206-103317_333503524","dateCreated":"2016-12-06T10:33:17+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:300","text":"\r\nval genreMap = genres.filter(!_.isEmpty).map(line => line.split(\"\\\\|\")).map(array => (array(1), array(0))).collectAsMap\r\nprintln(genreMap)\r\n// Map(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, ...","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:06+0900","dateStarted":"2016-12-06T11:30:04+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\ngenreMap: scala.collection.Map[String,String] = Map(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, 7 -> Documentary, 17 -> War, 1 -> Action, 4 -> Children's, 11 -> Horror, 14 -> Romance, 6 -> Crime, 0 -> unknown, 9 -> Fantasy, 16 -> Thriller, 3 -> Animation, 10 -> Film-Noir, 13 -> Mystery)\nMap(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, 7 -> Documentary, 17 -> War, 1 -> Action, 4 -> Children's, 11 -> Horror, 14 -> Romance, 6 -> Crime, 0 -> unknown, 9 -> Fantasy, 16 -> Thriller, 3 -> Animation, 10 -> Film-Noir, 13 -> Mystery)\r\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988008050_-1295205451","id":"20161206-103328_1988108738","dateCreated":"2016-12-06T10:33:28+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:376","text":"val titlesAndGenres = movies.map(_.split(\"\\\\|\")).map { array =>\r\n\tval genres = array.toSeq.slice(5, array.size)\r\n\tval genresAssigned = genres.zipWithIndex.filter { case (g, idx) => \r\n\t\tg == \"1\" \r\n\t}.map { case (g, idx) => \r\n\t\tgenreMap(idx.toString) \r\n\t}\r\n\t(array(0).toInt, (array(1), genresAssigned))\r\n}\r\nprintln(titlesAndGenres.first)\r\n// (1,(Toy Story (1995),ArrayBuffer(Animation, Children's, Comedy)))","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:07+0900","dateStarted":"2016-12-06T11:30:05+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntitlesAndGenres: org.apache.spark.rdd.RDD[(Int, (String, Seq[String]))] = MapPartitionsRDD[247] at map at <console>:36\n(1,(Toy Story (1995),ArrayBuffer(Animation, Children's, Comedy)))\r\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988021245_935984070","id":"20161206-103341_1725078531","dateCreated":"2016-12-06T10:33:41+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:446","text":"// Run ALS model to generate movie and user factors\r\nimport org.apache.spark.mllib.recommendation.ALS\r\nimport org.apache.spark.mllib.recommendation.Rating\r\n\r\nval rawData = sc.textFile(path + \"\\\\u.data\")\r\nval rawRatings = rawData.map(_.split(\"\\t\").take(3))\r\nval ratings = rawRatings.map{ case Array(user, movie, rating) => Rating(user.toInt, movie.toInt, rating.toDouble) }\r\nratings.cache\r\n\r\nval alsModel = ALS.train(ratings, 50, 10, 0.1)","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:15+0900","dateStarted":"2016-12-06T11:30:07+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.recommendation.ALS\n\nimport org.apache.spark.mllib.recommendation.Rating\n\nrawData: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.data MapPartitionsRDD[249] at textFile at <console>:34\n\nrawRatings: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[250] at map at <console>:36\n\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[251] at map at <console>:38\n\nres34: ratings.type = MapPartitionsRDD[251] at map at <console>:38\n\nalsModel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@264d2416\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988031553_-1761875218","id":"20161206-103351_308902410","dateCreated":"2016-12-06T10:33:51+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:516","text":"// extract factor vectors\r\nimport org.apache.spark.mllib.linalg.Vectors\r\n\r\nval movieFactors = alsModel.productFeatures.map { case (id, factor) => (id, Vectors.dense(factor)) }\r\nval movieVectors = movieFactors.map(_._2)\r\nval userFactors = alsModel.userFeatures.map { case (id, factor) => (id, Vectors.dense(factor)) }\r\nval userVectors = userFactors.map(_._2)","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:17+0900","dateStarted":"2016-12-06T11:30:07+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.linalg.Vectors\n\nmovieFactors: org.apache.spark.rdd.RDD[(Int, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[459] at map at <console>:43\n\nmovieVectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[460] at map at <console>:45\n\nuserFactors: org.apache.spark.rdd.RDD[(Int, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[461] at map at <console>:43\n\nuserVectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[462] at map at <console>:45\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480989708900_1487514778","id":"20161206-110148_1634567677","dateCreated":"2016-12-06T11:01:48+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1483","text":"movieFactors.take(5)","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:17+0900","dateStarted":"2016-12-06T11:30:15+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"res38: Array[(Int, org.apache.spark.mllib.linalg.Vector)] = Array((4,[-0.5457982420921326,-0.06166450306773186,-0.14536596834659576,0.5034591555595398,0.25753122568130493,-0.4569908678531647,-0.1491757333278656,0.2739613354206085,0.3301512897014618,0.5132785439491272,-0.18569940328598022,-0.09767527133226395,-0.11489258706569672,0.37614789605140686,-0.20157235860824585,-0.23560655117034912,-0.23002506792545319,0.15301117300987244,0.22350366413593292,0.26888158917427063,-0.182517871260643,-0.4674108624458313,0.003425645176321268,-0.012672673910856247,-0.20523372292518616,-0.023098064586520195,-0.13848383724689484,-0.2888452112674713,0.28578105568885803,-0.04827094450592995,-0.30455562472343445,-0.09045357257127762,0.21577323973178864,-0.011925016529858112,-0.31478258967399597,-0.14974766..."}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988041807_1485987818","id":"20161206-103401_1312603281","dateCreated":"2016-12-06T10:34:01+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:586","text":"// investigate distribution of features\r\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\r\n\r\nval movieMatrix = new RowMatrix(movieVectors)\r\nval movieMatrixSummary = movieMatrix.computeColumnSummaryStatistics()\r\nval userMatrix = new RowMatrix(userVectors)\r\nval userMatrixSummary = userMatrix.computeColumnSummaryStatistics()\r\n\r\nprintln(\"Movie factors mean: \" + movieMatrixSummary.mean)\r\nprintln(\"Movie factors variance: \" + movieMatrixSummary.variance)\r\nprintln(\"User factors mean: \" + userMatrixSummary.mean)\r\nprintln(\"User factors variance: \" + userMatrixSummary.variance)\r\n\r\n// Movie factors mean: [0.28047737659519767,0.26886479057520024,0.2935579964446398,0.27821738264113755, ... \r\n// Movie factors variance: [0.038242041794064895,0.03742229118854288,0.044116961097355877,0.057116244055791986, ...\r\n// User factors mean: [0.2043520841572601,0.22135773814655782,0.2149706318418221,0.23647602029329481, ...\r\n// User factors variance: [0.037749421148850396,0.02831191551960241,0.032831876953314174,0.036775110657850954, ...","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:20+0900","dateStarted":"2016-12-06T11:30:18+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\n\nmovieMatrix: org.apache.spark.mllib.linalg.distributed.RowMatrix = org.apache.spark.mllib.linalg.distributed.RowMatrix@31fa0be\n\nmovieMatrixSummary: org.apache.spark.mllib.stat.MultivariateStatisticalSummary = org.apache.spark.mllib.stat.MultivariateOnlineSummarizer@d82e301\n\nuserMatrix: org.apache.spark.mllib.linalg.distributed.RowMatrix = org.apache.spark.mllib.linalg.distributed.RowMatrix@dc0a7a2\n\nuserMatrixSummary: org.apache.spark.mllib.stat.MultivariateStatisticalSummary = org.apache.spark.mllib.stat.MultivariateOnlineSummarizer@129992a0\nMovie factors mean: [-0.3820555469841162,-0.15269999713766846,0.002285075260819887,0.3671947904947027,0.04701518656458723,-0.22878104297858434,-0.023469634520315905,0.15355029546541543,0.1925709674016332,0.4506900917453036,-0.09296905554572402,-0.12055078446445822,-0.21842631783675398,0.24528691343306433,-0.03127429719794447,-0.13774550203521035,0.14940928046690344,0.1146935390119602,0.10520215150481534,0.21956116493169678,-0.15362215861843453,-0.3718700045575089,0.10284611369750438,0.04647131435141976,-0.16175680443868157,0.13621755012076112,-0.2338590981645978,-0.09809688476169036,0.18341268998039612,-0.02008609088347737,-0.23581354566168727,-0.14178992289643935,-0.15412101341851078,0.016399904972037947,-0.14252098940355348,-0.10899627193924213,-0.30731543900548086,-0.07661353617765687,-0.052053363231045015,0.2970434804639148,-0.12339941372814742,0.12028132092807953,-0.30521229956614254,0.5101862393995674,0.13072648813009027,0.07217835349451138,0.21416159998577067,0.005259452841607342,-0.19366604421706607,0.17435782291884153]\r\nMovie factors variance: [0.04382346802162351,0.029568580636492155,0.03404886618233974,0.04383159070590674,0.02642348602266211,0.029201034947350442,0.02505491942111987,0.04376492751407594,0.03389661537172864,0.037754778612164794,0.044555753009415035,0.03300813656113055,0.0297400198108768,0.03944720191608804,0.02725816943049401,0.03885529943938975,0.030509571350058697,0.047778061700333496,0.028157880997909,0.043511468038498334,0.03291563704639312,0.030279973476045007,0.026923774516544773,0.025866928605743387,0.026382524227823997,0.03283926824019295,0.03351563139045327,0.028812425547472244,0.036344333590842826,0.026411195515736962,0.033336932154634236,0.026080993492452915,0.023845208216326248,0.029334437564917184,0.023862946134036483,0.04445042792089565,0.03511762805241767,0.03410762995698426,0.02695547574426016,0.05126498048180188,0.03003844176282226,0.021908640179218248,0.0381418192106909,0.04382040125913759,0.03072417730370251,0.026381445698162257,0.0317968865090216,0.029703145834778347,0.02777726129429452,0.02606795901999669]\r\nUser factors mean: [-0.5364638141520356,-0.20693082932274426,0.008164850285897493,0.4866581668698031,0.07070710260398447,-0.3000910865739957,-0.02218192600628336,0.17317369666858157,0.29490947185384475,0.6641998422724191,-0.1870123867074142,-0.18200519677084465,-0.2771949448615294,0.3687281714259002,-0.04593168470928543,-0.21733712972549693,0.16916372020444206,0.10871961703224928,0.19967274317993294,0.28211537990868457,-0.22709102955975383,-0.4814479200491408,0.08021097242474669,0.03760158516961537,-0.26146308025014364,0.2004406858593115,-0.31040692295037675,-0.16259164818380045,0.3030529546554863,-0.037080328267369886,-0.3437961863313355,-0.16658562868815638,-0.21627653273660458,-6.871149205619556E-4,-0.17900835693591835,-0.1555315216103014,-0.40292242398556644,-0.1095006962026623,-0.07203976405688321,0.4213674178891169,-0.14965317081522383,0.18134550677347874,-0.41009556731749375,0.731288644136547,0.1627633847828555,0.11007341360253112,0.22651238353252118,0.01782862834074795,-0.26354955992459445,0.22812435846344425]\r\nUser factors variance: [0.035247939411875095,0.03664299009817796,0.04534919604938553,0.03456510096716716,0.02850327867774108,0.030417924504837428,0.0311476610483364,0.05546015414991432,0.03347157962884417,0.033574908201172864,0.054716579615895086,0.033111434027248,0.043029891575829475,0.038241913786567966,0.03568519107542827,0.046284368443054946,0.03504450569016768,0.04627636390562739,0.032695394169488884,0.03999472023260111,0.044920141593923,0.034306043011516775,0.030997053562011427,0.03302161199430543,0.025419255178754565,0.04080905831393786,0.032547779799697474,0.034477124838823967,0.037601835873468964,0.034363260931188896,0.03529050043128671,0.03059140206925373,0.030974134581859488,0.03403902825408547,0.02901977917343517,0.045672723767733854,0.035471418475769304,0.04893634916292215,0.031558344833576786,0.06168019819009981,0.03468617935310562,0.026062866558214534,0.03840985346179313,0.03541997629969215,0.04036170824192619,0.028801842199194974,0.040064079410863436,0.03194929863817064,0.03459959681911995,0.03472970506857265]\r\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988050790_-1773220115","id":"20161206-103410_64213560","dateCreated":"2016-12-06T10:34:10+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:656","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:24+0900","dateStarted":"2016-12-06T11:30:18+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.clustering.KMeans\n\nnumClusters: Int = 5\n\nnumIterations: Int = 10\n\nnumRuns: Int = 3\n\nmovieClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@a5bb570\n"},"text":"// run K-means model on movie factor vectors\r\nimport org.apache.spark.mllib.clustering.KMeans\r\n\r\nval numClusters = 5\r\nval numIterations = 10\r\nval numRuns = 3\r\nval movieClusterModel = KMeans.train(movieVectors, numClusters, numIterations, numRuns)\r\n\r\n/*\r\n...\r\n14/09/02 22:16:45 INFO SparkContext: Job finished: collectAsMap at KMeans.scala:193, took 0.02043 s\r\n14/09/02 22:16:45 INFO KMeans: Iterations took 0.300 seconds.\r\n14/09/02 22:16:45 INFO KMeans: KMeans reached the max number of iterations: 10.\r\n14/09/02 22:16:45 INFO KMeans: The cost for the best run is 2585.6805358546403.\r\n...\r\nmovieClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@2771ccdc\r\n*/"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988052632_-993718844","id":"20161206-103412_1824542052","dateCreated":"2016-12-06T10:34:12+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:726","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:30+0900","dateStarted":"2016-12-06T11:30:21+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmovieClusterModelConverged: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@2dcbc4d\n"},"text":"// convergence example\r\nval movieClusterModelConverged = KMeans.train(movieVectors, numClusters, 100)\r\n\r\n/*\r\n...\r\n14/09/02 22:04:38 INFO SparkContext: Job finished: collectAsMap at KMeans.scala:193, took 0.040685 s\r\n14/09/02 22:04:38 INFO KMeans: Run 0 finished in 34 iterations\r\n14/09/02 22:04:38 INFO KMeans: Iterations took 0.812 seconds.\r\n14/09/02 22:04:38 INFO KMeans: KMeans converged in 34 iterations.\r\n14/09/02 22:04:38 INFO KMeans: The cost for the best run is 2584.9354332904104.\r\n...\r\nmovieClusterModelConverged: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@6bb28fb5\r\n*/"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988054094_-89558928","id":"20161206-103414_1728042300","dateCreated":"2016-12-06T10:34:14+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:796","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:33+0900","dateStarted":"2016-12-06T11:30:24+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nuserClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@72e403c8\nmovie1: org.apache.spark.mllib.linalg.Vector = [-0.5457982420921326,-0.06166450306773186,-0.14536596834659576,0.5034591555595398,0.25753122568130493,-0.4569908678531647,-0.1491757333278656,0.2739613354206085,0.3301512897014618,0.5132785439491272,-0.18569940328598022,-0.09767527133226395,-0.11489258706569672,0.37614789605140686,-0.20157235860824585,-0.23560655117034912,-0.23002506792545319,0.15301117300987244,0.22350366413593292,0.26888158917427063,-0.182517871260643,-0.4674108624458313,0.003425645176321268,-0.012672673910856247,-0.20523372292518616,-0.023098064586520195,-0.13848383724689484,-0.2888452112674713,0.28578105568885803,-0.04827094450592995,-0.30455562472343445,-0.09045357257127762,0.21577323973178864,-0.011925016529858112,-0.31478258967399597,-0.14974766969680786,-0.632539749...\nmovieCluster: Int = 0\n0\r\n\npredictions: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[682] at map at KMeansModel.scala:69\n0,0,0,0,0,3,4,0,2,2\r\n"},"text":"// train user model\r\nval userClusterModel = KMeans.train(userVectors, numClusters, numIterations, numRuns)\r\n\r\n// predict a movie cluster for movie 1\r\nval movie1 = movieVectors.first\r\nval movieCluster = movieClusterModel.predict(movie1)\r\nprintln(movieCluster)\r\n// 4\r\n\r\n// predict clusters for all movies\r\nval predictions = movieClusterModel.predict(movieVectors)\r\nprintln(predictions.take(10).mkString(\",\"))\r\n// 0,0,1,1,2,1,0,1,1,1\r\n\r\n// inspect the movie clusters, by looking at the movies that are closest to each cluster center\r\n"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988056184_693020334","id":"20161206-103416_882507947","dateCreated":"2016-12-06T10:34:16+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:866","text":"// define Euclidean distance function\r\nimport breeze.linalg._\r\nimport breeze.numerics.pow\r\n\r\ndef computeDistance(v1: DenseVector[Double], v2: DenseVector[Double]): Double = pow(v1 - v2, 2).sum\r\n\r\n// join titles with the factor vectors, and compute the distance of each vector from the assigned cluster center\r\nval titlesWithFactors = titlesAndGenres.join(movieFactors)\r\nval moviesAssigned = titlesWithFactors.map { case (id, ((title, genres), vector)) => \r\n\tval pred = movieClusterModel.predict(vector)\r\n\tval clusterCentre = movieClusterModel.clusterCenters(pred)\r\n\tval dist = computeDistance(DenseVector(clusterCentre.toArray), DenseVector(vector.toArray))\r\n\t(id, title, genres.mkString(\" \"), pred, dist) \r\n}\r\nval clusterAssignments = moviesAssigned.groupBy { case (id, title, genres, cluster, dist) => cluster }.collectAsMap \r\n\r\nfor ( (k, v) <- clusterAssignments.toSeq.sortBy(_._1)) {\r\n\tprintln(s\"Cluster $k:\")\r\n\tval m = v.toSeq.sortBy(_._5)\r\n\tprintln(m.take(20).map { case (_, title, genres, _, d) => (title, genres, d) }.mkString(\"\\n\")) \r\n\tprintln(\"=====\\n\")\r\n}\r\n// clustering mathematical evaluation\r\n","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:38+0900","dateStarted":"2016-12-06T11:30:30+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport breeze.linalg._\n\nimport breeze.numerics.pow\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\ncomputeDistance: (v1: breeze.linalg.DenseVector[Double], v2: breeze.linalg.DenseVector[Double])Double\n\ntitlesWithFactors: org.apache.spark.rdd.RDD[(Int, ((String, Seq[String]), org.apache.spark.mllib.linalg.Vector))] = MapPartitionsRDD[685] at join at <console>:57\n\nmoviesAssigned: org.apache.spark.rdd.RDD[(Int, String, String, Int, Double)] = MapPartitionsRDD[686] at map at <console>:71\nclusterAssignments: scala.collection.Map[Int,Iterable[(Int, String, String, Int, Double)]] = Map(2 -> CompactBuffer((1544,It Takes Two (1995),Comedy,2,0.6746066076075449), (1260,Total Eclipse (1995),Drama,2,1.7215694618148243), (1036,Drop Dead Fred (1991),Comedy Fantasy,2,2.1666646517880723), (996,Big Green, The (1995),Children's Comedy,2,1.3452320570946426), (1040,Two if by Sea (1996),Comedy Romance,2,1.1708006263208306), (140,Homeward Bound: The Incredible Journey (1993),Adventure Children's,2,1.7424882591332491), (576,Cliffhanger (1993),Action Adventure Crime,2,0.6268749805937446), (712,Tin Men (1987),Comedy Drama,2,0.7863661980697019), (992,Head Above Water (1996),Comedy Thriller,2,0.9823676389672711), (40,To Wong Foo, Thanks for Everything! Julie Newmar (1995),Comedy,2,1.8627082595...Cluster 0:\r\n(Witness (1985),Drama Romance Thriller,0.16549425160053946)\n(Last Time I Saw Paris, The (1954),Drama,0.1862488421400644)\n(King of the Hill (1993),Drama,0.2178621475576772)\n(Scream of Stone (Schrei aus Stein) (1991),Drama,0.29918577487694353)\n(Mamma Roma (1962),Drama,0.3221554322163437)\n(All Things Fair (1996),Drama,0.3361521003053217)\n(Nelly & Monsieur Arnaud (1995),Drama,0.3470192217578173)\n(Gate of Heavenly Peace, The (1995),Documentary,0.3491549137045546)\n(Cosi (1996),Comedy,0.36580425108858106)\n(Angel and the Badman (1947),Western,0.3685364564992227)\n(Beans of Egypt, Maine, The (1994),Drama,0.3824010552967989)\n(Ed's Next Move (1996),Comedy,0.3901553770477753)\n(Wings of Courage (1995),Adventure Romance,0.4261815070327551)\n(Celestial Clockwork (1994),Comedy,0.42622296996889386)\n(Love and Other Catastrophes (1996),Romance,0.4346185234858379)\n(Sweet Nothing (1995),Drama,0.44059776205304063)\n(Land and Freedom (Tierra y libertad) (1995),War,0.44260474879091816)\n(Eighth Day, The (1996),Drama,0.44260474879091816)\n(Dadetown (1995),Documentary,0.44260474879091816)\n(Big One, The (1997),Comedy Documentary,0.44260474879091816)\r\n=====\n\r\nCluster 1:\r\n(Machine, The (1994),Comedy Horror,0.06741868944117596)\n(Amityville 1992: It's About Time (1992),Horror,0.07114533522689305)\n(Amityville: A New Generation (1993),Horror,0.07114533522689305)\n(Amityville: Dollhouse (1996),Horror,0.08135616465000678)\n(Gordy (1995),Comedy,0.08241223853012301)\n(Somebody to Love (1994),Drama,0.0961428860982953)\n(Boys in Venice (1996),Drama,0.0961428860982953)\n(Venice/Venice (1992),Drama,0.10649083137617875)\n(Babyfever (1994),Comedy Drama,0.11156222519281787)\n(Beyond Bedlam (1993),Drama Horror,0.11950496117366644)\n(Johnny 100 Pesos (1993),Action Drama,0.12044068693294988)\n(Falling in Love Again (1980),Comedy,0.12262132669412393)\n(New Age, The (1994),Drama,0.12753040534163532)\n(Police Story 4: Project S (Chao ji ji hua) (1993),Action,0.12885115692659393)\n(Mighty, The (1998),Drama,0.1300362396121262)\n(Getting Away With Murder (1996),Comedy,0.13104478088232813)\n(3 Ninjas: High Noon At Mega Mountain (1998),Action Children's,0.1328437823559936)\n(King of New York (1990),Action Crime,0.14100520871653976)\n(War at Home, The (1996),Drama,0.14761482892922234)\n(Coldblooded (1995),Action,0.14816897010972385)\r\n=====\n\r\nCluster 2:\r\n(Johns (1996),Drama,0.4257480280777629)\n(Moonlight and Valentino (1995),Drama Romance,0.4268205848403536)\n(Stag (1997),Action Thriller,0.43861036221376953)\n(For Love or Money (1993),Comedy,0.4810726466001396)\n(Fausto (1993),Comedy,0.5072643293812834)\n(Air Up There, The (1994),Comedy,0.5524883923569905)\n(Ill Gotten Gains (1997),Drama,0.5563986029840405)\n(Pagemaster, The (1994),Action Adventure Animation Children's Fantasy,0.5567156135935033)\n(Blue Chips (1994),Drama,0.557762669481388)\n(Cops and Robbersons (1994),Comedy,0.5633364735119571)\n(Robocop 3 (1993),Sci-Fi Thriller,0.5997457896530607)\n(Cliffhanger (1993),Action Adventure Crime,0.6268749805937446)\n(New Jersey Drive (1995),Crime Drama,0.6690624514616954)\n(Chasers (1994),Comedy,0.6727788307070819)\n(It Takes Two (1995),Comedy,0.6746066076075449)\n(Santa Clause, The (1994),Children's Comedy,0.6789762749848036)\n(Life with Mikey (1993),Comedy,0.6894416733011165)\n(Cool Runnings (1993),Comedy,0.703905027712931)\n(House Party 3 (1994),Comedy,0.7199640088914627)\n(Shooter, The (1995),Action,0.7221436111753599)\r\n=====\n\r\nCluster 3:\r\n(All Over Me (1997),Drama,0.25423425617224077)\n(Intimate Relations (1996),Comedy,0.3703101196172259)\n(Wedding Bell Blues (1996),Comedy,0.40684303518782206)\n(Tainted (1998),Comedy Thriller,0.40684303518782206)\n(Next Step, The (1995),Drama,0.40684303518782206)\n(Bewegte Mann, Der (1994),Comedy,0.4261894167281307)\n(Nightwatch (1997),Horror Thriller,0.4481019316346974)\n(Salut cousin! (1996),Comedy Drama,0.5173253673451688)\n(To Have, or Not (1995),Drama,0.5173253673451688)\n(American Strays (1996),Action,0.5312145080943246)\n(Innocent Sleep, The (1995),Crime,0.5635984776463614)\n(Bonheur, Le (1965),Drama,0.5802190141933237)\n(Squeeze (1996),Drama,0.580768219114372)\n(Fall (1997),Romance,0.5855585592548728)\n(Twilight (1998),Crime Drama,0.5942036093020256)\n(Buddy (1997),Adventure Children's Drama,0.5988594002827311)\n(I Like It Like That (1994),Comedy Drama Romance,0.6261842667462902)\n(Blink (1994),Thriller,0.6521027665654427)\n(Hunted, The (1995),Action,0.6533476373120134)\n(Wolf (1994),Drama Horror,0.6663373288763131)\r\n=====\n\r\nCluster 4:\r\n(Substance of Fire, The (1996),Drama,0.27392837790798896)\n(Wedding Gift, The (1994),Drama,0.316953895468429)\n(Outlaw, The (1943),Western,0.32654621678730267)\n(Prefontaine (1997),Drama,0.3294160784710255)\n(Mr. Wonderful (1993),Comedy Romance,0.3486808604637831)\n(Angela (1995),Drama,0.3502743848964237)\n(Wife, The (1995),Comedy Drama,0.3660789287368822)\n(Commandments (1997),Romance,0.3672256259915806)\n(Apollo 13 (1995),Action Drama Thriller,0.39975561631244855)\n(Abyss, The (1989),Action Adventure Sci-Fi Thriller,0.4353596206568518)\n(Sword in the Stone, The (1963),Animation Children's,0.4686556556334664)\n(Target (1995),Action Drama,0.47039886672330955)\n(Dave (1993),Comedy Romance,0.4704829087728936)\n(Touch (1997),Romance,0.48375792046768773)\n(Outbreak (1995),Action Drama Thriller,0.48826561778368527)\n(Killer: A Journal of Murder (1995),Crime Drama,0.5010940492941286)\n(Mr. Jones (1993),Drama Romance,0.511798301353509)\n(Aladdin (1992),Animation Children's Comedy Musical,0.5177416814691126)\n(In the Line of Fire (1993),Action Thriller,0.5188289007194518)\n(Indiana Jones and the Last Crusade (1989),Action Adventure,0.523871582437905)\r\n=====\n\r\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988099192_-217018084","id":"20161206-103459_1450801775","dateCreated":"2016-12-06T10:34:59+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:942","dateUpdated":"2016-12-06T11:30:04+0900","dateFinished":"2016-12-06T11:30:40+0900","dateStarted":"2016-12-06T11:30:34+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmovieCost: Double = 2287.8616893382205\n\nuserCost: Double = 1493.1450996765493\nWCSS for movies: 2287.8616893382205\r\nWCSS for users: 1493.1450996765493\r\n"},"text":"// compute the cost (WCSS) on for movie and user clustering\r\nval movieCost = movieClusterModel.computeCost(movieVectors)\r\nval userCost = userClusterModel.computeCost(userVectors)\r\n\r\nprintln(\"WCSS for movies: \" + movieCost)\r\nprintln(\"WCSS for users: \" + userCost)\r\n// WCSS for movies: 2586.0777166339426\r\n// WCSS for users: 1403.4137493396831"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988108358_540567825","id":"20161206-103508_327859213","dateCreated":"2016-12-06T10:35:08+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1012","dateUpdated":"2016-12-06T11:30:05+0900","dateFinished":"2016-12-06T11:30:55+0900","dateStarted":"2016-12-06T11:30:39+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntrainTestSplitMovies: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector]] = Array(MapPartitionsRDD[691] at randomSplit at <console>:54, MapPartitionsRDD[692] at randomSplit at <console>:54)\n\ntrainMovies: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[691] at randomSplit at <console>:54\n\ntestMovies: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[692] at randomSplit at <console>:54\n\ncostsMovies: Seq[(Int, Double)] = List((2,897.17293503526), (3,908.0353781931724), (4,881.8648681109341), (5,888.8081663564086), (10,888.63478420976), (20,879.1472715569946))\nMovie clustering cross-validation:\r\nWCSS for K=2 id 897.17\r\nWCSS for K=3 id 908.04\r\nWCSS for K=4 id 881.86\r\nWCSS for K=5 id 888.81\r\nWCSS for K=10 id 888.63\r\nWCSS for K=20 id 879.15\r\n"},"text":"// cross-validation for movie clusters\r\nval trainTestSplitMovies = movieVectors.randomSplit(Array(0.6, 0.4), 123)\r\nval trainMovies = trainTestSplitMovies(0)\r\nval testMovies = trainTestSplitMovies(1)\r\nval costsMovies = Seq(2, 3, 4, 5, 10, 20).map { k => (k, KMeans.train(trainMovies, numIterations, k, numRuns).computeCost(testMovies)) }\r\n\r\nprintln(\"Movie clustering cross-validation:\")\r\ncostsMovies.foreach { case (k, cost) => println(f\"WCSS for K=$k id $cost%2.2f\") }\r\n/*\r\nMovie clustering cross-validation:\r\nWCSS for K=2 id 942.06\r\nWCSS for K=3 id 942.67\r\nWCSS for K=4 id 950.35\r\nWCSS for K=5 id 948.20\r\nWCSS for K=10 id 943.26\r\nWCSS for K=20 id 947.10\r\n*/"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988116259_1992625498","id":"20161206-103516_439973980","dateCreated":"2016-12-06T10:35:16+0900","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1082","text":"// cross-validation for user clusters\r\nval trainTestSplitUsers = userVectors.randomSplit(Array(0.6, 0.4), 123)\r\nval trainUsers = trainTestSplitUsers(0)\r\nval testUsers = trainTestSplitUsers(1)\r\nval costsUsers = Seq(2, 3, 4, 5, 10, 20).map { k => (k, KMeans.train(trainUsers, numIterations, k, numRuns).computeCost(testUsers)) }\r\n\r\nprintln(\"User clustering cross-validation:\")\r\ncostsUsers.foreach { case (k, cost) => println(f\"WCSS for K=$k id $cost%2.2f\") }\r\n/*\r\nUser clustering cross-validation:\r\nWCSS for K=2 id 544.02\r\nWCSS for K=3 id 542.18\r\nWCSS for K=4 id 542.38\r\nWCSS for K=5 id 542.33\r\nWCSS for K=10 id 539.68\r\nWCSS for K=20 id 541.21\r\n*/\r\n","dateUpdated":"2016-12-06T11:30:05+0900","dateFinished":"2016-12-06T11:31:07+0900","dateStarted":"2016-12-06T11:30:40+0900","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntrainTestSplitUsers: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector]] = Array(MapPartitionsRDD[949] at randomSplit at <console>:54, MapPartitionsRDD[950] at randomSplit at <console>:54)\n\ntrainUsers: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[949] at randomSplit at <console>:54\n\ntestUsers: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[950] at randomSplit at <console>:54\n\ncostsUsers: Seq[(Int, Double)] = List((2,570.910629367073), (3,579.9833844459799), (4,570.439312090346), (5,571.0276826634972), (10,569.7991011458785), (20,572.219478932883))\nUser clustering cross-validation:\r\nWCSS for K=2 id 570.91\r\nWCSS for K=3 id 579.98\r\nWCSS for K=4 id 570.44\r\nWCSS for K=5 id 571.03\r\nWCSS for K=10 id 569.80\r\nWCSS for K=20 id 572.22\r\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480991405065_-494673805","id":"20161206-113005_1529204658","dateCreated":"2016-12-06T11:30:05+0900","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1598","dateUpdated":"2016-12-06T11:30:15+0900","text":""}],"name":"Chapter 07","id":"2C3V8176C","angularObjects":{"2C47MGX9B:shared_process":[],"2C22X7YME:shared_process":[],"2C3K6RKJN:shared_process":[],"2C2EWZ9TA:shared_process":[],"2C2JMDYZ3:shared_process":[],"2C1S848VZ:shared_process":[],"2C2QVVB9Q:shared_process":[],"2C43GNJ9W:shared_process":[],"2C12D5W9R:shared_process":[],"2C1T2UZ3P:shared_process":[],"2C3G51W1E:shared_process":[],"2C36955YP:shared_process":[],"2BZTACRZS:shared_process":[],"2C4AVWZ7X:shared_process":[],"2C3MT2CTG:shared_process":[],"2C1T89CKC:shared_process":[],"2C33Z58NN:shared_process":[],"2C29H1CDW:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}