{"paragraphs":[{"text":"/*\r\n\tThis code is intended to be run in the Scala shell. \r\n\tLaunch the Scala Spark shell by running ./bin/spark-shell from the Spark directory.\r\n\tYou can enter each line in the shell and see the result immediately.\r\n\tThe expected output in the Spark console is presented as commented lines following the\r\n\trelevant code\r\n\r\n\tThe Scala shell creates a SparkContex variable available to us as 'sc'\r\n*/\r\n\r\n/* Replace 'PATH' with the path to the MovieLens data */\r\n\r\n// load movie data\r\nval path = \"D:\\\\Project\\\\Spark\\\\Machine-Learning-with-Spark\\\\Data\\\\ml-100k\"\r\nval movies = sc.textFile(path + \"\\\\u.item\")\r\nprintln(movies.first)\r\n// 1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0\r\n\r\nval genres = sc.textFile(path + \"\\\\u.genre\")\r\ngenres.take(5).foreach(println)\r\n/*\r\nunknown|0\r\nAction|1\r\nAdventure|2\r\nAnimation|3\r\nChildren's|4\r\n*/","dateUpdated":"2016-12-08T08:35:21+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480986915573_1476189615","id":"20161206-101515_1414301312","result":{"code":"SUCCESS","type":"TEXT","msg":"1|Toy Story (1995)|01-Jan-1995||http://us.imdb.com/M/title-exact?Toy%20Story%20(1995)|0|0|0|1|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0\r\nunknown|0\r\nAction|1\r\nAdventure|2\r\nAnimation|3\r\nChildren's|4\r\n\r\n\r\n\npath: String = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\r\nmovies: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.item MapPartitionsRDD[1] at textFile at <console>:41\r\ngenres: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.genre MapPartitionsRDD[3] at textFile at <console>:45\n"},"dateCreated":"2016-12-06T10:15:15+0900","dateStarted":"2016-12-08T08:35:21+0900","dateFinished":"2016-12-08T08:35:51+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:226"},{"text":"\r\nval genreMap = genres.filter(!_.isEmpty).map(line => line.split(\"\\\\|\")).map(array => (array(1), array(0))).collectAsMap\r\nprintln(genreMap)\r\n// Map(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, ...","dateUpdated":"2016-12-08T08:35:21+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480987997228_1278764691","id":"20161206-103317_333503524","result":{"code":"SUCCESS","type":"TEXT","msg":"\ngenreMap: scala.collection.Map[String,String] = Map(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, 7 -> Documentary, 17 -> War, 1 -> Action, 4 -> Children's, 11 -> Horror, 14 -> Romance, 6 -> Crime, 0 -> unknown, 9 -> Fantasy, 16 -> Thriller, 3 -> Animation, 10 -> Film-Noir, 13 -> Mystery)\nMap(2 -> Adventure, 5 -> Comedy, 12 -> Musical, 15 -> Sci-Fi, 8 -> Drama, 18 -> Western, 7 -> Documentary, 17 -> War, 1 -> Action, 4 -> Children's, 11 -> Horror, 14 -> Romance, 6 -> Crime, 0 -> unknown, 9 -> Fantasy, 16 -> Thriller, 3 -> Animation, 10 -> Film-Noir, 13 -> Mystery)\r\n"},"dateCreated":"2016-12-06T10:33:17+0900","dateStarted":"2016-12-08T08:35:28+0900","dateFinished":"2016-12-08T08:35:54+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:227"},{"text":"val titlesAndGenres = movies.map(_.split(\"\\\\|\")).map { array =>\r\n\tval genres = array.toSeq.slice(5, array.size)\r\n\tval genresAssigned = genres.zipWithIndex.filter { case (g, idx) => \r\n\t\tg == \"1\" \r\n\t}.map { case (g, idx) => \r\n\t\tgenreMap(idx.toString) \r\n\t}\r\n\t(array(0).toInt, (array(1), genresAssigned))\r\n}\r\nprintln(titlesAndGenres.first)\r\n// (1,(Toy Story (1995),ArrayBuffer(Animation, Children's, Comedy)))","dateUpdated":"2016-12-08T08:35:21+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988008050_-1295205451","id":"20161206-103328_1988108738","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntitlesAndGenres: org.apache.spark.rdd.RDD[(Int, (String, Seq[String]))] = MapPartitionsRDD[8] at map at <console>:33\n(1,(Toy Story (1995),ArrayBuffer(Animation, Children's, Comedy)))\r\n"},"dateCreated":"2016-12-06T10:33:28+0900","dateStarted":"2016-12-08T08:35:52+0900","dateFinished":"2016-12-08T08:35:57+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:228"},{"text":"// Run ALS model to generate movie and user factors\r\nimport org.apache.spark.mllib.recommendation.ALS\r\nimport org.apache.spark.mllib.recommendation.Rating\r\n\r\nval rawData = sc.textFile(path + \"\\\\u.data\")\r\nval rawRatings = rawData.map(_.split(\"\\t\").take(3))\r\nval ratings = rawRatings.map{ case Array(user, movie, rating) => Rating(user.toInt, movie.toInt, rating.toDouble) }\r\nratings.cache\r\n\r\nval alsModel = ALS.train(ratings, 50, 10, 0.1)","dateUpdated":"2016-12-08T08:35:21+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988021245_935984070","id":"20161206-103341_1725078531","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.recommendation.ALS\n\nimport org.apache.spark.mllib.recommendation.Rating\n\nrawData: org.apache.spark.rdd.RDD[String] = D:\\Project\\Spark\\Machine-Learning-with-Spark\\Data\\ml-100k\\u.data MapPartitionsRDD[10] at textFile at <console>:31\n\nrawRatings: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[11] at map at <console>:33\n\nratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[12] at map at <console>:35\n\nres8: ratings.type = MapPartitionsRDD[12] at map at <console>:35\n\nalsModel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@67d6a9a\n"},"dateCreated":"2016-12-06T10:33:41+0900","dateStarted":"2016-12-08T08:35:55+0900","dateFinished":"2016-12-08T08:36:11+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:229"},{"text":"// extract factor vectors\r\nimport org.apache.spark.mllib.linalg.Vectors\r\n\r\nval movieFactors = alsModel.productFeatures.map { case (id, factor) => (id, Vectors.dense(factor)) }\r\nval movieVectors = movieFactors.map(_._2)\r\nval userFactors = alsModel.userFeatures.map { case (id, factor) => (id, Vectors.dense(factor)) }\r\nval userVectors = userFactors.map(_._2)","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988031553_-1761875218","id":"20161206-103351_308902410","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.linalg.Vectors\n\nmovieFactors: org.apache.spark.rdd.RDD[(Int, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[220] at map at <console>:40\n\nmovieVectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[221] at map at <console>:42\n\nuserFactors: org.apache.spark.rdd.RDD[(Int, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[222] at map at <console>:40\n\nuserVectors: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[223] at map at <console>:42\n"},"dateCreated":"2016-12-06T10:33:51+0900","dateStarted":"2016-12-08T08:35:57+0900","dateFinished":"2016-12-08T08:36:13+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:230"},{"text":"movieFactors.take(5)","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480989708900_1487514778","id":"20161206-110148_1634567677","result":{"code":"SUCCESS","type":"TEXT","msg":"res12: Array[(Int, org.apache.spark.mllib.linalg.Vector)] = Array((4,[0.11360610276460648,-0.44942089915275574,0.14140060544013977,0.41227075457572937,0.2943578362464905,0.12799660861492157,0.05570231005549431,0.09246691316366196,0.2794845700263977,0.19458237290382385,0.2392907440662384,-0.3915730118751526,-0.4223656952381134,0.34218353033065796,0.44282329082489014,-0.11909152567386627,-0.16667558252811432,0.10428830981254578,-0.07625164091587067,0.012636099942028522,6.510720704682171E-4,0.36460667848587036,-0.5204058885574341,-0.12848910689353943,-0.5540484189987183,-0.2014235556125641,0.41778042912483215,-0.2180270254611969,0.22731506824493408,0.14017339050769806,-0.32342275977134705,0.008904043585062027,0.3213493227958679,0.02188115380704403,0.13615593314170837,0.026904119178652763,-..."},"dateCreated":"2016-12-06T11:01:48+0900","dateStarted":"2016-12-08T08:36:11+0900","dateFinished":"2016-12-08T08:36:14+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:231"},{"text":"// investigate distribution of features\r\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\r\n\r\nval movieMatrix = new RowMatrix(movieVectors)\r\nval movieMatrixSummary = movieMatrix.computeColumnSummaryStatistics()\r\nval userMatrix = new RowMatrix(userVectors)\r\nval userMatrixSummary = userMatrix.computeColumnSummaryStatistics()\r\n\r\nprintln(\"Movie factors mean: \" + movieMatrixSummary.mean)\r\nprintln(\"Movie factors variance: \" + movieMatrixSummary.variance)\r\nprintln(\"User factors mean: \" + userMatrixSummary.mean)\r\nprintln(\"User factors variance: \" + userMatrixSummary.variance)\r\n\r\n// Movie factors mean: [0.28047737659519767,0.26886479057520024,0.2935579964446398,0.27821738264113755, ... \r\n// Movie factors variance: [0.038242041794064895,0.03742229118854288,0.044116961097355877,0.057116244055791986, ...\r\n// User factors mean: [0.2043520841572601,0.22135773814655782,0.2149706318418221,0.23647602029329481, ...\r\n// User factors variance: [0.037749421148850396,0.02831191551960241,0.032831876953314174,0.036775110657850954, ...","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988041807_1485987818","id":"20161206-103401_1312603281","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\n\nmovieMatrix: org.apache.spark.mllib.linalg.distributed.RowMatrix = org.apache.spark.mllib.linalg.distributed.RowMatrix@29288ac8\n\nmovieMatrixSummary: org.apache.spark.mllib.stat.MultivariateStatisticalSummary = org.apache.spark.mllib.stat.MultivariateOnlineSummarizer@107c5c21\n\nuserMatrix: org.apache.spark.mllib.linalg.distributed.RowMatrix = org.apache.spark.mllib.linalg.distributed.RowMatrix@4463c4eb\n\nuserMatrixSummary: org.apache.spark.mllib.stat.MultivariateStatisticalSummary = org.apache.spark.mllib.stat.MultivariateOnlineSummarizer@12618552\nMovie factors mean: [-0.06844260899245051,-0.12099269099786128,0.10261980147371884,0.44059184393164447,0.2006804344469622,0.06448864281821126,-0.03796232932046468,0.09887261485975646,0.057423814115685236,0.30984084381701227,0.2444407915642326,-0.39184406660588533,-0.25070713639086173,0.3053989756340769,0.3353138401956503,-0.17028859401590724,-0.09487091952082995,0.07002864484724393,0.2025654666790664,-0.10994714676373372,0.0027176628835617203,0.1548361563999455,-0.25637537359629475,-0.09182316186741062,-0.32763591031440426,-0.05959851479490422,0.34375267496330325,-0.15292770226591956,0.10280770402651095,0.11980252403370847,-0.31529745808165804,0.028225045122994053,-0.030730137079152828,0.08410617760082907,0.08437653442224455,0.15543787233999723,-0.07142327971248419,-0.001509300227501421,-0.13184256188160998,0.25803533715899013,0.1874351237553835,0.2543977682986606,-0.21005551952390583,0.08683691543732369,-0.3051601176304797,-0.03573048463102049,0.08950948932427144,0.27340772359787807,0.009974989126805733,0.24565524999701488]\r\nMovie factors variance: [0.027281051423389466,0.027135797638201817,0.025335924318097964,0.03593787028767141,0.037126172767907785,0.03052134649868133,0.03827281878178915,0.029925466268172426,0.04334374373124762,0.03149956755420681,0.03297325127314748,0.03396360329797465,0.032208375124065415,0.04136443575385455,0.040929000264000176,0.03533956516759827,0.031553898801751225,0.029655352725664087,0.032226440253186474,0.030612443844001174,0.03324796942390065,0.02836178419563767,0.035680492405589084,0.028121034611701318,0.03829589455570012,0.03252593408485418,0.02678043475392315,0.026255717227675328,0.030591703813817258,0.039744704912257525,0.04362319580480443,0.02775303936733063,0.027184555636950037,0.028514303470894335,0.023204879358285992,0.03227978543887211,0.0296769691547151,0.02774739431048789,0.027887528632348665,0.039816386534671525,0.027530925398145355,0.03314429521150251,0.02587776502302577,0.03323129233612801,0.039869987124716975,0.027360995870029214,0.041778018645417914,0.028765618010887832,0.030809531882555287,0.047921656717992325]\r\nUser factors mean: [-0.07696289667441293,-0.1807012683497409,0.08704885244222983,0.6492381527692015,0.2652775659403652,0.0865236808685265,-0.08950997108701231,0.12161038408786984,0.10988900115262751,0.4341045558985426,0.38076044296280875,-0.57669671608702,-0.3862013592217355,0.38327505854960847,0.5114709456458152,-0.24580488203785114,-0.15870399531653223,0.042723876622135504,0.23460159405981001,-0.19781637029661342,-0.04002163651284381,0.2600121676452974,-0.3668591397605077,-0.15338142749728498,-0.462646648066547,-0.10875557653053122,0.519388735096325,-0.2321903385256032,0.15887558101407429,0.14280756744737602,-0.4604903482180186,0.06599815982627288,-0.026612533490661894,0.13338891583142104,0.14517497133249058,0.20173289300275907,-0.04836628651139428,0.016946683075539135,-0.19523064054085934,0.3860830560925073,0.24793826585714798,0.3176676736559303,-0.3008041701396613,0.145381200096101,-0.46992324822121084,-0.026138640837457924,0.07244918669601369,0.3698254988890749,0.010988808891312284,0.35470144512743945]\r\nUser factors variance: [0.03385364487234417,0.03462878455065409,0.030090767786518143,0.04353379147077646,0.03841440545401625,0.033379885578961745,0.04913376133693091,0.03415123550724935,0.049623561538981634,0.031789540210804476,0.029648498943990062,0.0330886875045293,0.03030111010277552,0.045450394926928886,0.048912840071610196,0.03744965225518717,0.04513896813359841,0.035647434401948924,0.03768106241947331,0.03544790197426418,0.041464546231717005,0.03350847729485228,0.04013687018297555,0.03524072782182535,0.03434300906114546,0.037678449295665994,0.03342063315063116,0.03174051291572465,0.02969254297402277,0.04980761947982231,0.041528216623715586,0.03258797709100427,0.03673225926244889,0.034360146782471464,0.02773519036708471,0.033957946220013364,0.030389396228182906,0.03293407500362114,0.04143563684882918,0.031326626619448045,0.03211923672904195,0.044410425819610286,0.03232675789733919,0.04326390019535453,0.03556498212912318,0.030234978735709288,0.05708104329807256,0.03281078492698838,0.03973247868700915,0.04495940595200986]\r\n"},"dateCreated":"2016-12-06T10:34:01+0900","dateStarted":"2016-12-08T08:36:14+0900","dateFinished":"2016-12-08T08:36:17+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:232"},{"text":"// run K-means model on movie factor vectors\r\nimport org.apache.spark.mllib.clustering.KMeans\r\n\r\nval numClusters = 5\r\nval numIterations = 10\r\nval numRuns = 3\r\nval movieClusterModel = KMeans.train(movieVectors, numClusters, numIterations, numRuns)\r\n\r\n/*\r\n...\r\n14/09/02 22:16:45 INFO SparkContext: Job finished: collectAsMap at KMeans.scala:193, took 0.02043 s\r\n14/09/02 22:16:45 INFO KMeans: Iterations took 0.300 seconds.\r\n14/09/02 22:16:45 INFO KMeans: KMeans reached the max number of iterations: 10.\r\n14/09/02 22:16:45 INFO KMeans: The cost for the best run is 2585.6805358546403.\r\n...\r\nmovieClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@2771ccdc\r\n*/","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988050790_-1773220115","id":"20161206-103410_64213560","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.mllib.clustering.KMeans\n\nnumClusters: Int = 5\n\nnumIterations: Int = 10\n\nnumRuns: Int = 3\n\nmovieClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@32c865a7\n"},"dateCreated":"2016-12-06T10:34:10+0900","dateStarted":"2016-12-08T08:36:15+0900","dateFinished":"2016-12-08T08:36:22+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:233"},{"text":"// convergence example\r\nval movieClusterModelConverged = KMeans.train(movieVectors, numClusters, 100)\r\n\r\n/*\r\n...\r\n14/09/02 22:04:38 INFO SparkContext: Job finished: collectAsMap at KMeans.scala:193, took 0.040685 s\r\n14/09/02 22:04:38 INFO KMeans: Run 0 finished in 34 iterations\r\n14/09/02 22:04:38 INFO KMeans: Iterations took 0.812 seconds.\r\n14/09/02 22:04:38 INFO KMeans: KMeans converged in 34 iterations.\r\n14/09/02 22:04:38 INFO KMeans: The cost for the best run is 2584.9354332904104.\r\n...\r\nmovieClusterModelConverged: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@6bb28fb5\r\n*/","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988052632_-993718844","id":"20161206-103412_1824542052","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmovieClusterModelConverged: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@513b1f5\n"},"dateCreated":"2016-12-06T10:34:12+0900","dateStarted":"2016-12-08T08:36:18+0900","dateFinished":"2016-12-08T08:36:25+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:234"},{"text":"// train user model\r\nval userClusterModel = KMeans.train(userVectors, numClusters, numIterations, numRuns)\r\n\r\n// predict a movie cluster for movie 1\r\nval movie1 = movieVectors.first\r\nval movieCluster = movieClusterModel.predict(movie1)\r\nprintln(movieCluster)\r\n// 4\r\n\r\n// predict clusters for all movies\r\nval predictions = movieClusterModel.predict(movieVectors)\r\nprintln(predictions.take(10).mkString(\",\"))\r\n// 0,0,1,1,2,1,0,1,1,1\r\n\r\n// inspect the movie clusters, by looking at the movies that are closest to each cluster center\r\n","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988054094_-89558928","id":"20161206-103414_1728042300","result":{"code":"SUCCESS","type":"TEXT","msg":"\nuserClusterModel: org.apache.spark.mllib.clustering.KMeansModel = org.apache.spark.mllib.clustering.KMeansModel@51a2ed5\nmovie1: org.apache.spark.mllib.linalg.Vector = [0.11360610276460648,-0.44942089915275574,0.14140060544013977,0.41227075457572937,0.2943578362464905,0.12799660861492157,0.05570231005549431,0.09246691316366196,0.2794845700263977,0.19458237290382385,0.2392907440662384,-0.3915730118751526,-0.4223656952381134,0.34218353033065796,0.44282329082489014,-0.11909152567386627,-0.16667558252811432,0.10428830981254578,-0.07625164091587067,0.012636099942028522,6.510720704682171E-4,0.36460667848587036,-0.5204058885574341,-0.12848910689353943,-0.5540484189987183,-0.2014235556125641,0.41778042912483215,-0.2180270254611969,0.22731506824493408,0.14017339050769806,-0.32342275977134705,0.008904043585062027,0.3213493227958679,0.02188115380704403,0.13615593314170837,0.026904119178652763,-0.08983968198299408,0....\nmovieCluster: Int = 2\n2\r\n\npredictions: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[375] at map at KMeansModel.scala:69\n2,2,2,3,2,3,0,3,4,4\r\n"},"dateCreated":"2016-12-06T10:34:14+0900","dateStarted":"2016-12-08T08:36:22+0900","dateFinished":"2016-12-08T08:36:28+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:235"},{"text":"// define Euclidean distance function\r\nimport breeze.linalg._\r\nimport breeze.numerics.pow\r\n\r\ndef computeDistance(v1: DenseVector[Double], v2: DenseVector[Double]): Double = pow(v1 - v2, 2).sum\r\n\r\n// join titles with the factor vectors, and compute the distance of each vector from the assigned cluster center\r\nval titlesWithFactors = titlesAndGenres.join(movieFactors)\r\nval moviesAssigned = titlesWithFactors.map { case (id, ((title, genres), vector)) => \r\n\tval pred = movieClusterModel.predict(vector)\r\n\tval clusterCentre = movieClusterModel.clusterCenters(pred)\r\n\tval dist = computeDistance(DenseVector(clusterCentre.toArray), DenseVector(vector.toArray))\r\n\t(id, title, genres.mkString(\" \"), pred, dist) \r\n}\r\nval clusterAssignments = moviesAssigned.groupBy { case (id, title, genres, cluster, dist) => cluster }.collectAsMap \r\n\r\nfor ( (k, v) <- clusterAssignments.toSeq.sortBy(_._1)) {\r\n\tprintln(s\"Cluster $k:\")\r\n\tval m = v.toSeq.sortBy(_._5)\r\n\tprintln(m.take(20).map { case (_, title, genres, _, d) => (title, genres, d) }.mkString(\"\\n\")) \r\n\tprintln(\"=====\\n\")\r\n}\r\n// clustering mathematical evaluation\r\n","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988056184_693020334","id":"20161206-103416_882507947","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport breeze.linalg._\n\nimport breeze.numerics.pow\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\ncomputeDistance: (v1: breeze.linalg.DenseVector[Double], v2: breeze.linalg.DenseVector[Double])Double\n\ntitlesWithFactors: org.apache.spark.rdd.RDD[(Int, ((String, Seq[String]), org.apache.spark.mllib.linalg.Vector))] = MapPartitionsRDD[378] at join at <console>:54\n\nmoviesAssigned: org.apache.spark.rdd.RDD[(Int, String, String, Int, Double)] = MapPartitionsRDD[379] at map at <console>:68\nclusterAssignments: scala.collection.Map[Int,Iterable[(Int, String, String, Int, Double)]] = Map(2 -> CompactBuffer((1084,Anne Frank Remembered (1995),Documentary,2,1.9762581644399575), (180,Apocalypse Now (1979),Drama War,2,1.1263055235356023), (1080,Celestial Clockwork (1994),Comedy,2,0.5324252360080081), (408,Close Shave, A (1995),Animation Comedy Thriller,2,1.151644228682508), (428,Harold and Maude (1971),Comedy,2,0.9160802554447879), (464,Vanya on 42nd Street (1994),Drama,2,1.6897384727881537), (956,Nobody's Fool (1994),Drama,2,0.8000586649274197), (12,Usual Suspects, The (1995),Crime Thriller,2,0.9344093373291446), (192,Raging Bull (1980),Drama,2,1.6900565306148643), (492,East of Eden (1955),Drama,2,1.1197888047237492), (512,Wings of Desire (1987),Comedy Drama Romance,2,2.19773588...Cluster 0:\r\n(Angela (1995),Drama,0.28905607445000103)\n(Outlaw, The (1943),Western,0.2926880938444803)\n(Mr. Wonderful (1993),Comedy Romance,0.31393470339693663)\n(Intimate Relations (1996),Comedy,0.3228713188569159)\n(Wedding Gift, The (1994),Drama,0.34755696572495276)\n(Commandments (1997),Romance,0.3524694244820673)\n(Wife, The (1995),Comedy Drama,0.36009099091046964)\n(Prefontaine (1997),Drama,0.3919624595971124)\n(Johns (1996),Drama,0.40409863481536973)\n(Outbreak (1995),Action Drama Thriller,0.4068663043947708)\n(Sword in the Stone, The (1963),Animation Children's,0.41672077772986665)\n(Mr. Jones (1993),Drama Romance,0.4454685357123319)\n(Target (1995),Action Drama,0.45295971430883275)\n(Apollo 13 (1995),Action Drama Thriller,0.45437821384388705)\n(River Wild, The (1994),Action Thriller,0.4929298204061833)\n(Abyss, The (1989),Action Adventure Sci-Fi Thriller,0.49451217410378234)\n(Touch (1997),Romance,0.5300058005621174)\n(Princess Caraboo (1994),Drama,0.5333646297037289)\n(In the Line of Fire (1993),Action Thriller,0.5376398242105026)\n(Crimson Tide (1995),Drama Thriller War,0.543872950024095)\r\n=====\n\r\nCluster 1:\r\n(Machine, The (1994),Comedy Horror,0.05886804985994992)\n(Johnny 100 Pesos (1993),Action Drama,0.10151821634470261)\n(Amityville 1992: It's About Time (1992),Horror,0.10154122117166758)\n(Amityville: A New Generation (1993),Horror,0.10154122117166758)\n(Venice/Venice (1992),Drama,0.11297907767686184)\n(Gordy (1995),Comedy,0.11480236370711608)\n(Amityville: Dollhouse (1996),Horror,0.11772689948900905)\n(Coldblooded (1995),Action,0.11970937322641773)\n(Somebody to Love (1994),Drama,0.12360394064888233)\n(Boys in Venice (1996),Drama,0.12360394064888233)\n(War at Home, The (1996),Drama,0.13398642979969258)\n(Falling in Love Again (1980),Comedy,0.13531018821672822)\n(Catwalk (1995),Documentary,0.136262915270034)\n(Small Faces (1995),Drama,0.15224180541401738)\n(3 Ninjas: High Noon At Mega Mountain (1998),Action Children's,0.15258568439098358)\n(Babyfever (1994),Comedy Drama,0.15709105422754172)\n(Beyond Bedlam (1993),Drama Horror,0.16076037901905293)\n(Getting Away With Murder (1996),Comedy,0.1627918640038103)\n(Police Story 4: Project S (Chao ji ji hua) (1993),Action,0.1635473562323)\n(Homage (1995),Drama,0.16361465463342167)\r\n=====\n\r\nCluster 2:\r\n(Last Time I Saw Paris, The (1954),Drama,0.15903254605086803)\n(Witness (1985),Drama Romance Thriller,0.24271707164225417)\n(Substance of Fire, The (1996),Drama,0.25433100455809854)\n(Beans of Egypt, Maine, The (1994),Drama,0.297109206418848)\n(Mamma Roma (1962),Drama,0.30446068497381057)\n(Angel and the Badman (1947),Western,0.3131256205236921)\n(All Things Fair (1996),Drama,0.3252905647550881)\n(Nelly & Monsieur Arnaud (1995),Drama,0.3746617320571989)\n(Cosi (1996),Comedy,0.38681847726256646)\n(They Made Me a Criminal (1939),Crime Drama,0.40412338754126054)\n(Spirits of the Dead (Tre passi nel delirio) (1968),Horror,0.41029942683518705)\n(Third Man, The (1949),Mystery Thriller,0.4106773435815444)\n(Object of My Affection, The (1998),Comedy Romance,0.4169432094933092)\n(Spellbound (1945),Mystery Romance Thriller,0.44942916841239894)\n(Sleepover (1995),Comedy Drama,0.4516324883351546)\n(Love Is All There Is (1996),Comedy Drama,0.4516324883351546)\n(Century (1993),Drama,0.4516324883351546)\n(Farewell to Arms, A (1932),Romance War,0.46049492837427997)\n(Vertigo (1958),Mystery Thriller,0.4647265702715563)\n(Love and Other Catastrophes (1996),Romance,0.46951634822515936)\r\n=====\n\r\nCluster 3:\r\n(King of the Hill (1993),Drama,0.1976716548545787)\n(All Over Me (1997),Drama,0.2518300182773283)\n(Wings of Courage (1995),Adventure Romance,0.29874881815225285)\n(Scream of Stone (Schrei aus Stein) (1991),Drama,0.3066231596355489)\n(Gate of Heavenly Peace, The (1995),Documentary,0.31208684105085027)\n(Land and Freedom (Tierra y libertad) (1995),War,0.3625599851604422)\n(Eighth Day, The (1996),Drama,0.3625599851604422)\n(Dadetown (1995),Documentary,0.3625599851604422)\n(Big One, The (1997),Comedy Documentary,0.3625599851604422)\n(� k�ldum klaka (Cold Fever) (1994),Comedy Drama,0.3625599851604422)\n(Girls Town (1996),Drama,0.3625599851604422)\n(Silence of the Palace, The (Saimt el Qusur) (1994),Drama,0.3625599851604422)\n(Normal Life (1996),Crime Drama,0.3625599851604422)\n(Two Friends (1986) ,Drama,0.3625599851604422)\n(Hana-bi (1997),Comedy Crime Drama,0.3625599851604422)\n(I Can't Sleep (J'ai pas sommeil) (1994),Drama Thriller,0.3626440159353503)\n(Sweet Nothing (1995),Drama,0.3682260311436034)\n(Walking Dead, The (1995),Drama War,0.3803552903669189)\n(Ed's Next Move (1996),Comedy,0.3836837006329521)\n(Killer: A Journal of Murder (1995),Crime Drama,0.4162020084491794)\r\n=====\n\r\nCluster 4:\r\n(Moonlight and Valentino (1995),Drama Romance,0.4343914854941703)\n(Stag (1997),Action Thriller,0.4662102211245715)\n(Blue Chips (1994),Drama,0.4742531971663548)\n(For Love or Money (1993),Comedy,0.49618675839666126)\n(Air Up There, The (1994),Comedy,0.5123546615182709)\n(Pagemaster, The (1994),Action Adventure Animation Children's Fantasy,0.5359092512677727)\n(Ill Gotten Gains (1997),Drama,0.5379475833410711)\n(Fausto (1993),Comedy,0.5641955659976863)\n(Robocop 3 (1993),Sci-Fi Thriller,0.5924807095471277)\n(Cliffhanger (1993),Action Adventure Crime,0.6306759394519974)\n(Cops and Robbersons (1994),Comedy,0.6360774431303587)\n(Life with Mikey (1993),Comedy,0.663421129278714)\n(American Strays (1996),Action,0.6651254484609981)\n(It Takes Two (1995),Comedy,0.678252696602136)\n(Cool Runnings (1993),Comedy,0.6783334443079145)\n(Getting Even with Dad (1994),Comedy,0.6803498375186217)\n(Santa Clause, The (1994),Children's Comedy,0.6826766139927036)\n(Chasers (1994),Comedy,0.6937173384425893)\n(Tokyo Fist (1995),Action Drama,0.7191898269571865)\n(House Party 3 (1994),Comedy,0.7328872332984643)\r\n=====\n\r\n"},"dateCreated":"2016-12-06T10:34:16+0900","dateStarted":"2016-12-08T08:36:26+0900","dateFinished":"2016-12-08T08:36:34+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:236"},{"text":"// compute the cost (WCSS) on for movie and user clustering\r\nval movieCost = movieClusterModel.computeCost(movieVectors)\r\nval userCost = userClusterModel.computeCost(userVectors)\r\n\r\nprintln(\"WCSS for movies: \" + movieCost)\r\nprintln(\"WCSS for users: \" + userCost)\r\n// WCSS for movies: 2586.0777166339426\r\n// WCSS for users: 1403.4137493396831","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988099192_-217018084","id":"20161206-103459_1450801775","result":{"code":"SUCCESS","type":"TEXT","msg":"\nmovieCost: Double = 2266.6796374277037\n\nuserCost: Double = 1507.5320512259332\nWCSS for movies: 2266.6796374277037\r\nWCSS for users: 1507.5320512259332\r\n"},"dateCreated":"2016-12-06T10:34:59+0900","dateStarted":"2016-12-08T08:36:29+0900","dateFinished":"2016-12-08T08:36:36+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:237"},{"text":"// cross-validation for movie clusters\r\nval trainTestSplitMovies = movieVectors.randomSplit(Array(0.6, 0.4), 123)\r\nval trainMovies = trainTestSplitMovies(0)\r\nval testMovies = trainTestSplitMovies(1)\r\nval costsMovies = Seq(2, 3, 4, 5, 10, 20).map { k => (k, KMeans.train(trainMovies, numIterations, k, numRuns).computeCost(testMovies)) }\r\n\r\nprintln(\"Movie clustering cross-validation:\")\r\ncostsMovies.foreach { case (k, cost) => println(f\"WCSS for K=$k id $cost%2.2f\") }\r\n/*\r\nMovie clustering cross-validation:\r\nWCSS for K=2 id 942.06\r\nWCSS for K=3 id 942.67\r\nWCSS for K=4 id 950.35\r\nWCSS for K=5 id 948.20\r\nWCSS for K=10 id 943.26\r\nWCSS for K=20 id 947.10\r\n*/","dateUpdated":"2016-12-08T08:35:22+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988108358_540567825","id":"20161206-103508_327859213","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntrainTestSplitMovies: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector]] = Array(MapPartitionsRDD[384] at randomSplit at <console>:51, MapPartitionsRDD[385] at randomSplit at <console>:51)\n\ntrainMovies: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[384] at randomSplit at <console>:51\n\ntestMovies: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[385] at randomSplit at <console>:51\n\ncostsMovies: Seq[(Int, Double)] = List((2,902.2198639693086), (3,901.0699551977918), (4,886.6131506662902), (5,887.383166372391), (10,878.3248794681533), (20,881.1244171218066))\nMovie clustering cross-validation:\r\nWCSS for K=2 id 902.22\r\nWCSS for K=3 id 901.07\r\nWCSS for K=4 id 886.61\r\nWCSS for K=5 id 887.38\r\nWCSS for K=10 id 878.32\r\nWCSS for K=20 id 881.12\r\n"},"dateCreated":"2016-12-06T10:35:08+0900","dateStarted":"2016-12-08T08:36:35+0900","dateFinished":"2016-12-08T08:36:47+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:238"},{"text":"// cross-validation for user clusters\r\nval trainTestSplitUsers = userVectors.randomSplit(Array(0.6, 0.4), 123)\r\nval trainUsers = trainTestSplitUsers(0)\r\nval testUsers = trainTestSplitUsers(1)\r\nval costsUsers = Seq(2, 3, 4, 5, 10, 20).map { k => (k, KMeans.train(trainUsers, numIterations, k, numRuns).computeCost(testUsers)) }\r\n\r\nprintln(\"User clustering cross-validation:\")\r\ncostsUsers.foreach { case (k, cost) => println(f\"WCSS for K=$k id $cost%2.2f\") }\r\n/*\r\nUser clustering cross-validation:\r\nWCSS for K=2 id 544.02\r\nWCSS for K=3 id 542.18\r\nWCSS for K=4 id 542.38\r\nWCSS for K=5 id 542.33\r\nWCSS for K=10 id 539.68\r\nWCSS for K=20 id 541.21\r\n*/\r\n","dateUpdated":"2016-12-08T08:35:23+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480988116259_1992625498","id":"20161206-103516_439973980","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntrainTestSplitUsers: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector]] = Array(MapPartitionsRDD[642] at randomSplit at <console>:51, MapPartitionsRDD[643] at randomSplit at <console>:51)\n\ntrainUsers: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[642] at randomSplit at <console>:51\n\ntestUsers: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] = MapPartitionsRDD[643] at randomSplit at <console>:51\n\ncostsUsers: Seq[(Int, Double)] = List((2,579.4196469624118), (3,570.6378431318161), (4,573.547134812178), (5,568.7957729649803), (10,572.3259593898034), (20,569.9405616237244))\nUser clustering cross-validation:\r\nWCSS for K=2 id 579.42\r\nWCSS for K=3 id 570.64\r\nWCSS for K=4 id 573.55\r\nWCSS for K=5 id 568.80\r\nWCSS for K=10 id 572.33\r\nWCSS for K=20 id 569.94\r\n"},"dateCreated":"2016-12-06T10:35:16+0900","dateStarted":"2016-12-08T08:36:36+0900","dateFinished":"2016-12-08T08:36:58+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:239"},{"text":"","dateUpdated":"2016-12-08T08:35:23+0900","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480991405065_-494673805","id":"20161206-113005_1529204658","dateCreated":"2016-12-06T11:30:05+0900","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:240","dateFinished":"2016-12-08T08:36:58+0900","dateStarted":"2016-12-08T08:36:47+0900","result":{"code":"SUCCESS","type":"TEXT","msg":""}}],"name":"Chapter 07","id":"2C3V8176C","angularObjects":{"2C47MGX9B:shared_process":[],"2C22X7YME:shared_process":[],"2C3K6RKJN:shared_process":[],"2C2EWZ9TA:shared_process":[],"2C2JMDYZ3:shared_process":[],"2C1S848VZ:shared_process":[],"2C2QVVB9Q:shared_process":[],"2C43GNJ9W:shared_process":[],"2C12D5W9R:shared_process":[],"2C1T2UZ3P:shared_process":[],"2C3G51W1E:shared_process":[],"2C36955YP:shared_process":[],"2BZTACRZS:shared_process":[],"2C4AVWZ7X:shared_process":[],"2C3MT2CTG:shared_process":[],"2C1T89CKC:shared_process":[],"2C33Z58NN:shared_process":[],"2C29H1CDW:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}